
F767ZI_FreeRTOS_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b88  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  08004d88  08004d88  00014d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e3c  08004e3c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e44  08004e44  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e44  08004e44  00014e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e48  08004e48  00014e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000049c0  20000010  08004e5c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049d0  08004e5c  000249d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001581a  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c7  00000000  00000000  00035858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001278  00000000  00000000  00038920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001110  00000000  00000000  00039b98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028afe  00000000  00000000  0003aca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014c4d  00000000  00000000  000637a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff31f  00000000  00000000  000783f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00177712  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c10  00000000  00000000  00177764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000010 	.word	0x20000010
 800021c:	00000000 	.word	0x00000000
 8000220:	08004d70 	.word	0x08004d70

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000014 	.word	0x20000014
 800023c:	08004d70 	.word	0x08004d70

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Blink01 */
  Blink01Handle = osThreadNew(StartBlink01, NULL, &Blink01_attributes);
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <MX_FREERTOS_Init+0x38>)
 800054a:	2100      	movs	r1, #0
 800054c:	480c      	ldr	r0, [pc, #48]	; (8000580 <MX_FREERTOS_Init+0x3c>)
 800054e:	f001 fe71 	bl	8002234 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0b      	ldr	r2, [pc, #44]	; (8000584 <MX_FREERTOS_Init+0x40>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Blink02 */
  Blink02Handle = osThreadNew(StartBlink02, NULL, &Blink02_attributes);
 8000558:	4a0b      	ldr	r2, [pc, #44]	; (8000588 <MX_FREERTOS_Init+0x44>)
 800055a:	2100      	movs	r1, #0
 800055c:	480b      	ldr	r0, [pc, #44]	; (800058c <MX_FREERTOS_Init+0x48>)
 800055e:	f001 fe69 	bl	8002234 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0a      	ldr	r2, [pc, #40]	; (8000590 <MX_FREERTOS_Init+0x4c>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of Blink03 */
  Blink03Handle = osThreadNew(StartBlink03, NULL, &Blink03_attributes);
 8000568:	4a0a      	ldr	r2, [pc, #40]	; (8000594 <MX_FREERTOS_Init+0x50>)
 800056a:	2100      	movs	r1, #0
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <MX_FREERTOS_Init+0x54>)
 800056e:	f001 fe61 	bl	8002234 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a09      	ldr	r2, [pc, #36]	; (800059c <MX_FREERTOS_Init+0x58>)
 8000576:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000578:	bf00      	nop
 800057a:	bd80      	pop	{r7, pc}
 800057c:	08004db8 	.word	0x08004db8
 8000580:	080005a1 	.word	0x080005a1
 8000584:	2000002c 	.word	0x2000002c
 8000588:	08004ddc 	.word	0x08004ddc
 800058c:	080005c1 	.word	0x080005c1
 8000590:	20000030 	.word	0x20000030
 8000594:	08004e00 	.word	0x08004e00
 8000598:	080005e1 	.word	0x080005e1
 800059c:	20000034 	.word	0x20000034

080005a0 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005a8:	2101      	movs	r1, #1
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <StartBlink01+0x1c>)
 80005ac:	f000 fd83 	bl	80010b6 <HAL_GPIO_TogglePin>
    osDelay(500);
 80005b0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b4:	f001 fee4 	bl	8002380 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80005b8:	e7f6      	b.n	80005a8 <StartBlink01+0x8>
 80005ba:	bf00      	nop
 80005bc:	40020400 	.word	0x40020400

080005c0 <StartBlink02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink02 */
void StartBlink02(void *argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b082      	sub	sp, #8
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink02 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005c8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005cc:	4803      	ldr	r0, [pc, #12]	; (80005dc <StartBlink02+0x1c>)
 80005ce:	f000 fd72 	bl	80010b6 <HAL_GPIO_TogglePin>
    osDelay(200);
 80005d2:	20c8      	movs	r0, #200	; 0xc8
 80005d4:	f001 fed4 	bl	8002380 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80005d8:	e7f6      	b.n	80005c8 <StartBlink02+0x8>
 80005da:	bf00      	nop
 80005dc:	40020400 	.word	0x40020400

080005e0 <StartBlink03>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlink03 */
void StartBlink03(void *argument)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlink03 */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005e8:	2180      	movs	r1, #128	; 0x80
 80005ea:	4803      	ldr	r0, [pc, #12]	; (80005f8 <StartBlink03+0x18>)
 80005ec:	f000 fd63 	bl	80010b6 <HAL_GPIO_TogglePin>
    osDelay(100);
 80005f0:	2064      	movs	r0, #100	; 0x64
 80005f2:	f001 fec5 	bl	8002380 <osDelay>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80005f6:	e7f7      	b.n	80005e8 <StartBlink03+0x8>
 80005f8:	40020400 	.word	0x40020400

080005fc <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b08c      	sub	sp, #48	; 0x30
 8000600:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000602:	f107 031c 	add.w	r3, r7, #28
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000612:	4b7f      	ldr	r3, [pc, #508]	; (8000810 <MX_GPIO_Init+0x214>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a7e      	ldr	r2, [pc, #504]	; (8000810 <MX_GPIO_Init+0x214>)
 8000618:	f043 0304 	orr.w	r3, r3, #4
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b7c      	ldr	r3, [pc, #496]	; (8000810 <MX_GPIO_Init+0x214>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0304 	and.w	r3, r3, #4
 8000626:	61bb      	str	r3, [r7, #24]
 8000628:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062a:	4b79      	ldr	r3, [pc, #484]	; (8000810 <MX_GPIO_Init+0x214>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a78      	ldr	r2, [pc, #480]	; (8000810 <MX_GPIO_Init+0x214>)
 8000630:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b76      	ldr	r3, [pc, #472]	; (8000810 <MX_GPIO_Init+0x214>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800063e:	617b      	str	r3, [r7, #20]
 8000640:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000642:	4b73      	ldr	r3, [pc, #460]	; (8000810 <MX_GPIO_Init+0x214>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	4a72      	ldr	r2, [pc, #456]	; (8000810 <MX_GPIO_Init+0x214>)
 8000648:	f043 0301 	orr.w	r3, r3, #1
 800064c:	6313      	str	r3, [r2, #48]	; 0x30
 800064e:	4b70      	ldr	r3, [pc, #448]	; (8000810 <MX_GPIO_Init+0x214>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	f003 0301 	and.w	r3, r3, #1
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800065a:	4b6d      	ldr	r3, [pc, #436]	; (8000810 <MX_GPIO_Init+0x214>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a6c      	ldr	r2, [pc, #432]	; (8000810 <MX_GPIO_Init+0x214>)
 8000660:	f043 0302 	orr.w	r3, r3, #2
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b6a      	ldr	r3, [pc, #424]	; (8000810 <MX_GPIO_Init+0x214>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0302 	and.w	r3, r3, #2
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000672:	4b67      	ldr	r3, [pc, #412]	; (8000810 <MX_GPIO_Init+0x214>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a66      	ldr	r2, [pc, #408]	; (8000810 <MX_GPIO_Init+0x214>)
 8000678:	f043 0308 	orr.w	r3, r3, #8
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b64      	ldr	r3, [pc, #400]	; (8000810 <MX_GPIO_Init+0x214>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f003 0308 	and.w	r3, r3, #8
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800068a:	4b61      	ldr	r3, [pc, #388]	; (8000810 <MX_GPIO_Init+0x214>)
 800068c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068e:	4a60      	ldr	r2, [pc, #384]	; (8000810 <MX_GPIO_Init+0x214>)
 8000690:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000694:	6313      	str	r3, [r2, #48]	; 0x30
 8000696:	4b5e      	ldr	r3, [pc, #376]	; (8000810 <MX_GPIO_Init+0x214>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	f244 0181 	movw	r1, #16513	; 0x4081
 80006a8:	485a      	ldr	r0, [pc, #360]	; (8000814 <MX_GPIO_Init+0x218>)
 80006aa:	f000 fceb 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	4859      	ldr	r0, [pc, #356]	; (8000818 <MX_GPIO_Init+0x21c>)
 80006b4:	f000 fce6 	bl	8001084 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80006b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006be:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4853      	ldr	r0, [pc, #332]	; (800081c <MX_GPIO_Init+0x220>)
 80006d0:	f000 fb2c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80006d4:	2332      	movs	r3, #50	; 0x32
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e0:	2303      	movs	r3, #3
 80006e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e4:	230b      	movs	r3, #11
 80006e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	484b      	ldr	r0, [pc, #300]	; (800081c <MX_GPIO_Init+0x220>)
 80006f0:	f000 fb1c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006f4:	2386      	movs	r3, #134	; 0x86
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000704:	230b      	movs	r3, #11
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4844      	ldr	r0, [pc, #272]	; (8000820 <MX_GPIO_Init+0x224>)
 8000710:	f000 fb0c 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000714:	f244 0381 	movw	r3, #16513	; 0x4081
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2300      	movs	r3, #0
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	4619      	mov	r1, r3
 800072c:	4839      	ldr	r0, [pc, #228]	; (8000814 <MX_GPIO_Init+0x218>)
 800072e:	f000 fafd 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000732:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000740:	2303      	movs	r3, #3
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000744:	230b      	movs	r3, #11
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000748:	f107 031c 	add.w	r3, r7, #28
 800074c:	4619      	mov	r1, r3
 800074e:	4831      	ldr	r0, [pc, #196]	; (8000814 <MX_GPIO_Init+0x218>)
 8000750:	f000 faec 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000754:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000758:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000762:	2303      	movs	r3, #3
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000766:	2307      	movs	r3, #7
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	4619      	mov	r1, r3
 8000770:	482c      	ldr	r0, [pc, #176]	; (8000824 <MX_GPIO_Init+0x228>)
 8000772:	f000 fadb 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000776:	2340      	movs	r3, #64	; 0x40
 8000778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 031c 	add.w	r3, r7, #28
 800078a:	4619      	mov	r1, r3
 800078c:	4822      	ldr	r0, [pc, #136]	; (8000818 <MX_GPIO_Init+0x21c>)
 800078e:	f000 facd 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000792:	2380      	movs	r3, #128	; 0x80
 8000794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800079e:	f107 031c 	add.w	r3, r7, #28
 80007a2:	4619      	mov	r1, r3
 80007a4:	481c      	ldr	r0, [pc, #112]	; (8000818 <MX_GPIO_Init+0x21c>)
 80007a6:	f000 fac1 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80007aa:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80007ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b0:	2302      	movs	r3, #2
 80007b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b4:	2300      	movs	r3, #0
 80007b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b8:	2303      	movs	r3, #3
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80007bc:	230a      	movs	r3, #10
 80007be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c0:	f107 031c 	add.w	r3, r7, #28
 80007c4:	4619      	mov	r1, r3
 80007c6:	4816      	ldr	r0, [pc, #88]	; (8000820 <MX_GPIO_Init+0x224>)
 80007c8:	f000 fab0 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80007cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80007da:	f107 031c 	add.w	r3, r7, #28
 80007de:	4619      	mov	r1, r3
 80007e0:	480f      	ldr	r0, [pc, #60]	; (8000820 <MX_GPIO_Init+0x224>)
 80007e2:	f000 faa3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007e6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_GPIO_Init+0x21c>)
 8000804:	f000 fa92 	bl	8000d2c <HAL_GPIO_Init>

}
 8000808:	bf00      	nop
 800080a:	3730      	adds	r7, #48	; 0x30
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	40023800 	.word	0x40023800
 8000814:	40020400 	.word	0x40020400
 8000818:	40021800 	.word	0x40021800
 800081c:	40020800 	.word	0x40020800
 8000820:	40020000 	.word	0x40020000
 8000824:	40020c00 	.word	0x40020c00

08000828 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082c:	f000 f96f 	bl	8000b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000830:	f000 f80a 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000834:	f7ff fee2 	bl	80005fc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000838:	f001 fc92 	bl	8002160 <osKernelInitialize>
  MX_FREERTOS_Init();
 800083c:	f7ff fe82 	bl	8000544 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000840:	f001 fcc2 	bl	80021c8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000844:	e7fe      	b.n	8000844 <main+0x1c>
	...

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b094      	sub	sp, #80	; 0x50
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	2234      	movs	r2, #52	; 0x34
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f004 fa82 	bl	8004d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	f107 0308 	add.w	r3, r7, #8
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800086c:	f000 fc3e 	bl	80010ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000870:	4b2b      	ldr	r3, [pc, #172]	; (8000920 <SystemClock_Config+0xd8>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	4a2a      	ldr	r2, [pc, #168]	; (8000920 <SystemClock_Config+0xd8>)
 8000876:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800087a:	6413      	str	r3, [r2, #64]	; 0x40
 800087c:	4b28      	ldr	r3, [pc, #160]	; (8000920 <SystemClock_Config+0xd8>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000884:	607b      	str	r3, [r7, #4]
 8000886:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000888:	4b26      	ldr	r3, [pc, #152]	; (8000924 <SystemClock_Config+0xdc>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a25      	ldr	r2, [pc, #148]	; (8000924 <SystemClock_Config+0xdc>)
 800088e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000892:	6013      	str	r3, [r2, #0]
 8000894:	4b23      	ldr	r3, [pc, #140]	; (8000924 <SystemClock_Config+0xdc>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800089c:	603b      	str	r3, [r7, #0]
 800089e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008a0:	2301      	movs	r3, #1
 80008a2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80008a4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80008a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008aa:	2302      	movs	r3, #2
 80008ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008b2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008b4:	2304      	movs	r3, #4
 80008b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80008b8:	23d8      	movs	r3, #216	; 0xd8
 80008ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008bc:	2302      	movs	r3, #2
 80008be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008c0:	2309      	movs	r3, #9
 80008c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008c8:	f107 031c 	add.w	r3, r7, #28
 80008cc:	4618      	mov	r0, r3
 80008ce:	f000 fc6d 	bl	80011ac <HAL_RCC_OscConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80008d8:	f000 f838 	bl	800094c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008dc:	f000 fc16 	bl	800110c <HAL_PWREx_EnableOverDrive>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008e6:	f000 f831 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ea:	230f      	movs	r3, #15
 80008ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ee:	2302      	movs	r3, #2
 80008f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f2:	2300      	movs	r3, #0
 80008f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008f6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	2107      	movs	r1, #7
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fefd 	bl	8001708 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000914:	f000 f81a 	bl	800094c <Error_Handler>
  }
}
 8000918:	bf00      	nop
 800091a:	3750      	adds	r7, #80	; 0x50
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	40023800 	.word	0x40023800
 8000924:	40007000 	.word	0x40007000

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f8f5 	bl	8000b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40001000 	.word	0x40001000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_MspInit+0x4c>)
 8000960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	6413      	str	r3, [r2, #64]	; 0x40
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x4c>)
 800096c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x4c>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x4c>)
 800097c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000980:	6453      	str	r3, [r2, #68]	; 0x44
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000986:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 f99f 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08c      	sub	sp, #48	; 0x30
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	6879      	ldr	r1, [r7, #4]
 80009bc:	2036      	movs	r0, #54	; 0x36
 80009be:	f000 f98b 	bl	8000cd8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c2:	2036      	movs	r0, #54	; 0x36
 80009c4:	f000 f9a4 	bl	8000d10 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009c8:	4b1f      	ldr	r3, [pc, #124]	; (8000a48 <HAL_InitTick+0xa0>)
 80009ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009cc:	4a1e      	ldr	r2, [pc, #120]	; (8000a48 <HAL_InitTick+0xa0>)
 80009ce:	f043 0310 	orr.w	r3, r3, #16
 80009d2:	6413      	str	r3, [r2, #64]	; 0x40
 80009d4:	4b1c      	ldr	r3, [pc, #112]	; (8000a48 <HAL_InitTick+0xa0>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d8:	f003 0310 	and.w	r3, r3, #16
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009e0:	f107 0210 	add.w	r2, r7, #16
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4611      	mov	r1, r2
 80009ea:	4618      	mov	r0, r3
 80009ec:	f001 f89e 	bl	8001b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80009f0:	f001 f888 	bl	8001b04 <HAL_RCC_GetPCLK1Freq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009fc:	4a13      	ldr	r2, [pc, #76]	; (8000a4c <HAL_InitTick+0xa4>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <HAL_InitTick+0xac>)
 8000a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a16:	4a0e      	ldr	r2, [pc, #56]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a28:	4809      	ldr	r0, [pc, #36]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a2a:	f001 f8b1 	bl	8001b90 <HAL_TIM_Base_Init>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d104      	bne.n	8000a3e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a34:	4806      	ldr	r0, [pc, #24]	; (8000a50 <HAL_InitTick+0xa8>)
 8000a36:	f001 f90d 	bl	8001c54 <HAL_TIM_Base_Start_IT>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	e000      	b.n	8000a40 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	431bde83 	.word	0x431bde83
 8000a50:	20000038 	.word	0x20000038
 8000a54:	40001000 	.word	0x40001000

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a88:	4802      	ldr	r0, [pc, #8]	; (8000a94 <TIM6_DAC_IRQHandler+0x10>)
 8000a8a:	f001 f95b 	bl	8001d44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000038 	.word	0x20000038

08000a98 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <SystemInit+0x20>)
 8000a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aa2:	4a05      	ldr	r2, [pc, #20]	; (8000ab8 <SystemInit+0x20>)
 8000aa4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac2:	490e      	ldr	r1, [pc, #56]	; (8000afc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac4:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac8:	e002      	b.n	8000ad0 <LoopCopyDataInit>

08000aca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000acc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ace:	3304      	adds	r3, #4

08000ad0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad4:	d3f9      	bcc.n	8000aca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad8:	4c0b      	ldr	r4, [pc, #44]	; (8000b08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ada:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000adc:	e001      	b.n	8000ae2 <LoopFillZerobss>

08000ade <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ade:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae0:	3204      	adds	r2, #4

08000ae2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae4:	d3fb      	bcc.n	8000ade <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ae6:	f7ff ffd7 	bl	8000a98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f004 f907 	bl	8004cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000aee:	f7ff fe9b 	bl	8000828 <main>
  bx  lr    
 8000af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000af8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000afc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b00:	08004e4c 	.word	0x08004e4c
  ldr r2, =_sbss
 8000b04:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b08:	200049d0 	.word	0x200049d0

08000b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC_IRQHandler>

08000b0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b12:	2003      	movs	r0, #3
 8000b14:	f000 f8d5 	bl	8000cc2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b18:	200f      	movs	r0, #15
 8000b1a:	f7ff ff45 	bl	80009a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1e:	f7ff ff1b 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <HAL_IncTick+0x20>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	461a      	mov	r2, r3
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <HAL_IncTick+0x24>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4413      	add	r3, r2
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <HAL_IncTick+0x24>)
 8000b3a:	6013      	str	r3, [r2, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000008 	.word	0x20000008
 8000b4c:	20000084 	.word	0x20000084

08000b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return uwTick;
 8000b54:	4b03      	ldr	r3, [pc, #12]	; (8000b64 <HAL_GetTick+0x14>)
 8000b56:	681b      	ldr	r3, [r3, #0]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000084 	.word	0x20000084

08000b68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b78:	4b0b      	ldr	r3, [pc, #44]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b84:	4013      	ands	r3, r2
 8000b86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b8c:	68bb      	ldr	r3, [r7, #8]
 8000b8e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <__NVIC_SetPriorityGrouping+0x44>)
 8000b92:	4313      	orrs	r3, r2
 8000b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b96:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <__NVIC_SetPriorityGrouping+0x40>)
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr
 8000ba8:	e000ed00 	.word	0xe000ed00
 8000bac:	05fa0000 	.word	0x05fa0000

08000bb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <__NVIC_GetPriorityGrouping+0x18>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	0a1b      	lsrs	r3, r3, #8
 8000bba:	f003 0307 	and.w	r3, r3, #7
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	db0b      	blt.n	8000bf6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 021f 	and.w	r2, r3, #31
 8000be4:	4907      	ldr	r1, [pc, #28]	; (8000c04 <__NVIC_EnableIRQ+0x38>)
 8000be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bea:	095b      	lsrs	r3, r3, #5
 8000bec:	2001      	movs	r0, #1
 8000bee:	fa00 f202 	lsl.w	r2, r0, r2
 8000bf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000e100 	.word	0xe000e100

08000c08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	6039      	str	r1, [r7, #0]
 8000c12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	db0a      	blt.n	8000c32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	b2da      	uxtb	r2, r3
 8000c20:	490c      	ldr	r1, [pc, #48]	; (8000c54 <__NVIC_SetPriority+0x4c>)
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	0112      	lsls	r2, r2, #4
 8000c28:	b2d2      	uxtb	r2, r2
 8000c2a:	440b      	add	r3, r1
 8000c2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c30:	e00a      	b.n	8000c48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	4908      	ldr	r1, [pc, #32]	; (8000c58 <__NVIC_SetPriority+0x50>)
 8000c38:	79fb      	ldrb	r3, [r7, #7]
 8000c3a:	f003 030f 	and.w	r3, r3, #15
 8000c3e:	3b04      	subs	r3, #4
 8000c40:	0112      	lsls	r2, r2, #4
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	440b      	add	r3, r1
 8000c46:	761a      	strb	r2, [r3, #24]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	e000e100 	.word	0xe000e100
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b089      	sub	sp, #36	; 0x24
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60f8      	str	r0, [r7, #12]
 8000c64:	60b9      	str	r1, [r7, #8]
 8000c66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c70:	69fb      	ldr	r3, [r7, #28]
 8000c72:	f1c3 0307 	rsb	r3, r3, #7
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	bf28      	it	cs
 8000c7a:	2304      	movcs	r3, #4
 8000c7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3304      	adds	r3, #4
 8000c82:	2b06      	cmp	r3, #6
 8000c84:	d902      	bls.n	8000c8c <NVIC_EncodePriority+0x30>
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	3b03      	subs	r3, #3
 8000c8a:	e000      	b.n	8000c8e <NVIC_EncodePriority+0x32>
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c90:	f04f 32ff 	mov.w	r2, #4294967295
 8000c94:	69bb      	ldr	r3, [r7, #24]
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43da      	mvns	r2, r3
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	401a      	ands	r2, r3
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	fa01 f303 	lsl.w	r3, r1, r3
 8000cae:	43d9      	mvns	r1, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb4:	4313      	orrs	r3, r2
         );
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3724      	adds	r7, #36	; 0x24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr

08000cc2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cc2:	b580      	push	{r7, lr}
 8000cc4:	b082      	sub	sp, #8
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <__NVIC_SetPriorityGrouping>
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	60b9      	str	r1, [r7, #8]
 8000ce2:	607a      	str	r2, [r7, #4]
 8000ce4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cea:	f7ff ff61 	bl	8000bb0 <__NVIC_GetPriorityGrouping>
 8000cee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	68b9      	ldr	r1, [r7, #8]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff ffb1 	bl	8000c5c <NVIC_EncodePriority>
 8000cfa:	4602      	mov	r2, r0
 8000cfc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff80 	bl	8000c08 <__NVIC_SetPriority>
}
 8000d08:	bf00      	nop
 8000d0a:	3718      	adds	r7, #24
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	4603      	mov	r3, r0
 8000d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f7ff ff54 	bl	8000bcc <__NVIC_EnableIRQ>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	; 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d42:	2300      	movs	r3, #0
 8000d44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d46:	2300      	movs	r3, #0
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	e175      	b.n	8001038 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	697a      	ldr	r2, [r7, #20]
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d60:	693a      	ldr	r2, [r7, #16]
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	429a      	cmp	r2, r3
 8000d66:	f040 8164 	bne.w	8001032 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d005      	beq.n	8000d82 <HAL_GPIO_Init+0x56>
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 0303 	and.w	r3, r3, #3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d130      	bne.n	8000de4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	689b      	ldr	r3, [r3, #8]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000d88:	69fb      	ldr	r3, [r7, #28]
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	2203      	movs	r2, #3
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	69fb      	ldr	r3, [r7, #28]
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	69ba      	ldr	r2, [r7, #24]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000db8:	2201      	movs	r2, #1
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc0:	43db      	mvns	r3, r3
 8000dc2:	69ba      	ldr	r2, [r7, #24]
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dc8:	683b      	ldr	r3, [r7, #0]
 8000dca:	685b      	ldr	r3, [r3, #4]
 8000dcc:	091b      	lsrs	r3, r3, #4
 8000dce:	f003 0201 	and.w	r2, r3, #1
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd8:	69ba      	ldr	r2, [r7, #24]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b03      	cmp	r3, #3
 8000dee:	d017      	beq.n	8000e20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4013      	ands	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	689a      	ldr	r2, [r3, #8]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	fa02 f303 	lsl.w	r3, r2, r3
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	69ba      	ldr	r2, [r7, #24]
 8000e1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f003 0303 	and.w	r3, r3, #3
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d123      	bne.n	8000e74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e2c:	69fb      	ldr	r3, [r7, #28]
 8000e2e:	08da      	lsrs	r2, r3, #3
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	3208      	adds	r2, #8
 8000e34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	f003 0307 	and.w	r3, r3, #7
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	220f      	movs	r2, #15
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	691a      	ldr	r2, [r3, #16]
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	08da      	lsrs	r2, r3, #3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	3208      	adds	r2, #8
 8000e6e:	69b9      	ldr	r1, [r7, #24]
 8000e70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	2203      	movs	r2, #3
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0203 	and.w	r2, r3, #3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f000 80be 	beq.w	8001032 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb6:	4b66      	ldr	r3, [pc, #408]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eba:	4a65      	ldr	r2, [pc, #404]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000ebc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ec2:	4b63      	ldr	r3, [pc, #396]	; (8001050 <HAL_GPIO_Init+0x324>)
 8000ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eca:	60fb      	str	r3, [r7, #12]
 8000ecc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ece:	4a61      	ldr	r2, [pc, #388]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	089b      	lsrs	r3, r3, #2
 8000ed4:	3302      	adds	r3, #2
 8000ed6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	220f      	movs	r2, #15
 8000ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eea:	43db      	mvns	r3, r3
 8000eec:	69ba      	ldr	r2, [r7, #24]
 8000eee:	4013      	ands	r3, r2
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a58      	ldr	r2, [pc, #352]	; (8001058 <HAL_GPIO_Init+0x32c>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d037      	beq.n	8000f6a <HAL_GPIO_Init+0x23e>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a57      	ldr	r2, [pc, #348]	; (800105c <HAL_GPIO_Init+0x330>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d031      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a56      	ldr	r2, [pc, #344]	; (8001060 <HAL_GPIO_Init+0x334>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d02b      	beq.n	8000f62 <HAL_GPIO_Init+0x236>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	4a55      	ldr	r2, [pc, #340]	; (8001064 <HAL_GPIO_Init+0x338>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d025      	beq.n	8000f5e <HAL_GPIO_Init+0x232>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4a54      	ldr	r2, [pc, #336]	; (8001068 <HAL_GPIO_Init+0x33c>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d01f      	beq.n	8000f5a <HAL_GPIO_Init+0x22e>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4a53      	ldr	r2, [pc, #332]	; (800106c <HAL_GPIO_Init+0x340>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d019      	beq.n	8000f56 <HAL_GPIO_Init+0x22a>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a52      	ldr	r2, [pc, #328]	; (8001070 <HAL_GPIO_Init+0x344>)
 8000f26:	4293      	cmp	r3, r2
 8000f28:	d013      	beq.n	8000f52 <HAL_GPIO_Init+0x226>
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4a51      	ldr	r2, [pc, #324]	; (8001074 <HAL_GPIO_Init+0x348>)
 8000f2e:	4293      	cmp	r3, r2
 8000f30:	d00d      	beq.n	8000f4e <HAL_GPIO_Init+0x222>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a50      	ldr	r2, [pc, #320]	; (8001078 <HAL_GPIO_Init+0x34c>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d007      	beq.n	8000f4a <HAL_GPIO_Init+0x21e>
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4a4f      	ldr	r2, [pc, #316]	; (800107c <HAL_GPIO_Init+0x350>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d101      	bne.n	8000f46 <HAL_GPIO_Init+0x21a>
 8000f42:	2309      	movs	r3, #9
 8000f44:	e012      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f46:	230a      	movs	r3, #10
 8000f48:	e010      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4a:	2308      	movs	r3, #8
 8000f4c:	e00e      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f4e:	2307      	movs	r3, #7
 8000f50:	e00c      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f52:	2306      	movs	r3, #6
 8000f54:	e00a      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f56:	2305      	movs	r3, #5
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5a:	2304      	movs	r3, #4
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x240>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x328>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fae:	4a34      	ldr	r2, [pc, #208]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b32      	ldr	r3, [pc, #200]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd8:	4a29      	ldr	r2, [pc, #164]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fde:	4b28      	ldr	r3, [pc, #160]	; (8001080 <HAL_GPIO_Init+0x354>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <HAL_GPIO_Init+0x354>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <HAL_GPIO_Init+0x354>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102c:	4a14      	ldr	r2, [pc, #80]	; (8001080 <HAL_GPIO_Init+0x354>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f ae86 	bls.w	8000d4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40013800 	.word	0x40013800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40021400 	.word	0x40021400
 8001070:	40021800 	.word	0x40021800
 8001074:	40021c00 	.word	0x40021c00
 8001078:	40022000 	.word	0x40022000
 800107c:	40022400 	.word	0x40022400
 8001080:	40013c00 	.word	0x40013c00

08001084 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	460b      	mov	r3, r1
 800108e:	807b      	strh	r3, [r7, #2]
 8001090:	4613      	mov	r3, r2
 8001092:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001094:	787b      	ldrb	r3, [r7, #1]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800109a:	887a      	ldrh	r2, [r7, #2]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010a0:	e003      	b.n	80010aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010a2:	887b      	ldrh	r3, [r7, #2]
 80010a4:	041a      	lsls	r2, r3, #16
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	619a      	str	r2, [r3, #24]
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010b6:	b480      	push	{r7}
 80010b8:	b085      	sub	sp, #20
 80010ba:	af00      	add	r7, sp, #0
 80010bc:	6078      	str	r0, [r7, #4]
 80010be:	460b      	mov	r3, r1
 80010c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010c8:	887a      	ldrh	r2, [r7, #2]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4013      	ands	r3, r2
 80010ce:	041a      	lsls	r2, r3, #16
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	43d9      	mvns	r1, r3
 80010d4:	887b      	ldrh	r3, [r7, #2]
 80010d6:	400b      	ands	r3, r1
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a04      	ldr	r2, [pc, #16]	; (8001108 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80010f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010fa:	6013      	str	r3, [r2, #0]
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	40007000 	.word	0x40007000

0800110c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a22      	ldr	r2, [pc, #136]	; (80011a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800111c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b20      	ldr	r3, [pc, #128]	; (80011a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800112a:	603b      	str	r3, [r7, #0]
 800112c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800112e:	4b1e      	ldr	r3, [pc, #120]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1d      	ldr	r2, [pc, #116]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001134:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001138:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800113a:	f7ff fd09 	bl	8000b50 <HAL_GetTick>
 800113e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001140:	e009      	b.n	8001156 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001142:	f7ff fd05 	bl	8000b50 <HAL_GetTick>
 8001146:	4602      	mov	r2, r0
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	1ad3      	subs	r3, r2, r3
 800114c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001150:	d901      	bls.n	8001156 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e022      	b.n	800119c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800115e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001162:	d1ee      	bne.n	8001142 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001164:	4b10      	ldr	r3, [pc, #64]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0f      	ldr	r2, [pc, #60]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800116a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001170:	f7ff fcee 	bl	8000b50 <HAL_GetTick>
 8001174:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001176:	e009      	b.n	800118c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001178:	f7ff fcea 	bl	8000b50 <HAL_GetTick>
 800117c:	4602      	mov	r2, r0
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001186:	d901      	bls.n	800118c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001188:	2303      	movs	r3, #3
 800118a:	e007      	b.n	800119c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001194:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001198:	d1ee      	bne.n	8001178 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800
 80011a8:	40007000 	.word	0x40007000

080011ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011b4:	2300      	movs	r3, #0
 80011b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d101      	bne.n	80011c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e29b      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	f000 8087 	beq.w	80012de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011d0:	4b96      	ldr	r3, [pc, #600]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 030c 	and.w	r3, r3, #12
 80011d8:	2b04      	cmp	r3, #4
 80011da:	d00c      	beq.n	80011f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011dc:	4b93      	ldr	r3, [pc, #588]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80011de:	689b      	ldr	r3, [r3, #8]
 80011e0:	f003 030c 	and.w	r3, r3, #12
 80011e4:	2b08      	cmp	r3, #8
 80011e6:	d112      	bne.n	800120e <HAL_RCC_OscConfig+0x62>
 80011e8:	4b90      	ldr	r3, [pc, #576]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011f4:	d10b      	bne.n	800120e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011f6:	4b8d      	ldr	r3, [pc, #564]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d06c      	beq.n	80012dc <HAL_RCC_OscConfig+0x130>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d168      	bne.n	80012dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e275      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001216:	d106      	bne.n	8001226 <HAL_RCC_OscConfig+0x7a>
 8001218:	4b84      	ldr	r3, [pc, #528]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a83      	ldr	r2, [pc, #524]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800121e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001222:	6013      	str	r3, [r2, #0]
 8001224:	e02e      	b.n	8001284 <HAL_RCC_OscConfig+0xd8>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d10c      	bne.n	8001248 <HAL_RCC_OscConfig+0x9c>
 800122e:	4b7f      	ldr	r3, [pc, #508]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a7e      	ldr	r2, [pc, #504]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001238:	6013      	str	r3, [r2, #0]
 800123a:	4b7c      	ldr	r3, [pc, #496]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4a7b      	ldr	r2, [pc, #492]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001240:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	e01d      	b.n	8001284 <HAL_RCC_OscConfig+0xd8>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0xc0>
 8001252:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	4a75      	ldr	r2, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800125c:	6013      	str	r3, [r2, #0]
 800125e:	4b73      	ldr	r3, [pc, #460]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a72      	ldr	r2, [pc, #456]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001268:	6013      	str	r3, [r2, #0]
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0xd8>
 800126c:	4b6f      	ldr	r3, [pc, #444]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a6e      	ldr	r2, [pc, #440]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b6c      	ldr	r3, [pc, #432]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a6b      	ldr	r2, [pc, #428]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800127e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d013      	beq.n	80012b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800128c:	f7ff fc60 	bl	8000b50 <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001292:	e008      	b.n	80012a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001294:	f7ff fc5c 	bl	8000b50 <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	2b64      	cmp	r3, #100	; 0x64
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e229      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a6:	4b61      	ldr	r3, [pc, #388]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f0      	beq.n	8001294 <HAL_RCC_OscConfig+0xe8>
 80012b2:	e014      	b.n	80012de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012b4:	f7ff fc4c 	bl	8000b50 <HAL_GetTick>
 80012b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	e008      	b.n	80012ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012bc:	f7ff fc48 	bl	8000b50 <HAL_GetTick>
 80012c0:	4602      	mov	r2, r0
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	1ad3      	subs	r3, r2, r3
 80012c6:	2b64      	cmp	r3, #100	; 0x64
 80012c8:	d901      	bls.n	80012ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ca:	2303      	movs	r3, #3
 80012cc:	e215      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ce:	4b57      	ldr	r3, [pc, #348]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d1f0      	bne.n	80012bc <HAL_RCC_OscConfig+0x110>
 80012da:	e000      	b.n	80012de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d069      	beq.n	80013be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ea:	4b50      	ldr	r3, [pc, #320]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80012ec:	689b      	ldr	r3, [r3, #8]
 80012ee:	f003 030c 	and.w	r3, r3, #12
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00b      	beq.n	800130e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012f6:	4b4d      	ldr	r3, [pc, #308]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 030c 	and.w	r3, r3, #12
 80012fe:	2b08      	cmp	r3, #8
 8001300:	d11c      	bne.n	800133c <HAL_RCC_OscConfig+0x190>
 8001302:	4b4a      	ldr	r3, [pc, #296]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800130e:	4b47      	ldr	r3, [pc, #284]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f003 0302 	and.w	r3, r3, #2
 8001316:	2b00      	cmp	r3, #0
 8001318:	d005      	beq.n	8001326 <HAL_RCC_OscConfig+0x17a>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	2b01      	cmp	r3, #1
 8001320:	d001      	beq.n	8001326 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e1e9      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001326:	4b41      	ldr	r3, [pc, #260]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	493d      	ldr	r1, [pc, #244]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800133a:	e040      	b.n	80013be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001344:	4b39      	ldr	r3, [pc, #228]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a38      	ldr	r2, [pc, #224]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800134a:	f043 0301 	orr.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fbfe 	bl	8000b50 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fbfa 	bl	8000b50 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1c7      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	4b2d      	ldr	r3, [pc, #180]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	4929      	ldr	r1, [pc, #164]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001386:	4313      	orrs	r3, r2
 8001388:	600b      	str	r3, [r1, #0]
 800138a:	e018      	b.n	80013be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800138c:	4b27      	ldr	r3, [pc, #156]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a26      	ldr	r2, [pc, #152]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001392:	f023 0301 	bic.w	r3, r3, #1
 8001396:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001398:	f7ff fbda 	bl	8000b50 <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800139e:	e008      	b.n	80013b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013a0:	f7ff fbd6 	bl	8000b50 <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	2b02      	cmp	r3, #2
 80013ac:	d901      	bls.n	80013b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013ae:	2303      	movs	r3, #3
 80013b0:	e1a3      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	4b1e      	ldr	r3, [pc, #120]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f003 0302 	and.w	r3, r3, #2
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d1f0      	bne.n	80013a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d038      	beq.n	800143c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d019      	beq.n	8001406 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013d2:	4b16      	ldr	r3, [pc, #88]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80013d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013d6:	4a15      	ldr	r2, [pc, #84]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80013d8:	f043 0301 	orr.w	r3, r3, #1
 80013dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013de:	f7ff fbb7 	bl	8000b50 <HAL_GetTick>
 80013e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013e4:	e008      	b.n	80013f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e6:	f7ff fbb3 	bl	8000b50 <HAL_GetTick>
 80013ea:	4602      	mov	r2, r0
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	1ad3      	subs	r3, r2, r3
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d901      	bls.n	80013f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013f4:	2303      	movs	r3, #3
 80013f6:	e180      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_RCC_OscConfig+0x280>)
 80013fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0f0      	beq.n	80013e6 <HAL_RCC_OscConfig+0x23a>
 8001404:	e01a      	b.n	800143c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b09      	ldr	r3, [pc, #36]	; (800142c <HAL_RCC_OscConfig+0x280>)
 8001408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140a:	4a08      	ldr	r2, [pc, #32]	; (800142c <HAL_RCC_OscConfig+0x280>)
 800140c:	f023 0301 	bic.w	r3, r3, #1
 8001410:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001412:	f7ff fb9d 	bl	8000b50 <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141a:	f7ff fb99 	bl	8000b50 <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b02      	cmp	r3, #2
 8001426:	d903      	bls.n	8001430 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e166      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
 800142c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001430:	4b92      	ldr	r3, [pc, #584]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d1ee      	bne.n	800141a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0304 	and.w	r3, r3, #4
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80a4 	beq.w	8001592 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800144a:	4b8c      	ldr	r3, [pc, #560]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d10d      	bne.n	8001472 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001456:	4b89      	ldr	r3, [pc, #548]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	4a88      	ldr	r2, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800145c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001460:	6413      	str	r3, [r2, #64]	; 0x40
 8001462:	4b86      	ldr	r3, [pc, #536]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800146e:	2301      	movs	r3, #1
 8001470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001472:	4b83      	ldr	r3, [pc, #524]	; (8001680 <HAL_RCC_OscConfig+0x4d4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147a:	2b00      	cmp	r3, #0
 800147c:	d118      	bne.n	80014b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800147e:	4b80      	ldr	r3, [pc, #512]	; (8001680 <HAL_RCC_OscConfig+0x4d4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a7f      	ldr	r2, [pc, #508]	; (8001680 <HAL_RCC_OscConfig+0x4d4>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800148a:	f7ff fb61 	bl	8000b50 <HAL_GetTick>
 800148e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001490:	e008      	b.n	80014a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001492:	f7ff fb5d 	bl	8000b50 <HAL_GetTick>
 8001496:	4602      	mov	r2, r0
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	2b64      	cmp	r3, #100	; 0x64
 800149e:	d901      	bls.n	80014a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014a0:	2303      	movs	r3, #3
 80014a2:	e12a      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014a4:	4b76      	ldr	r3, [pc, #472]	; (8001680 <HAL_RCC_OscConfig+0x4d4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d106      	bne.n	80014c6 <HAL_RCC_OscConfig+0x31a>
 80014b8:	4b70      	ldr	r3, [pc, #448]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014bc:	4a6f      	ldr	r2, [pc, #444]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014be:	f043 0301 	orr.w	r3, r3, #1
 80014c2:	6713      	str	r3, [r2, #112]	; 0x70
 80014c4:	e02d      	b.n	8001522 <HAL_RCC_OscConfig+0x376>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d10c      	bne.n	80014e8 <HAL_RCC_OscConfig+0x33c>
 80014ce:	4b6b      	ldr	r3, [pc, #428]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a6a      	ldr	r2, [pc, #424]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b68      	ldr	r3, [pc, #416]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a67      	ldr	r2, [pc, #412]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
 80014e6:	e01c      	b.n	8001522 <HAL_RCC_OscConfig+0x376>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b05      	cmp	r3, #5
 80014ee:	d10c      	bne.n	800150a <HAL_RCC_OscConfig+0x35e>
 80014f0:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a61      	ldr	r2, [pc, #388]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	f043 0304 	orr.w	r3, r3, #4
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80014fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001500:	4a5e      	ldr	r2, [pc, #376]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001502:	f043 0301 	orr.w	r3, r3, #1
 8001506:	6713      	str	r3, [r2, #112]	; 0x70
 8001508:	e00b      	b.n	8001522 <HAL_RCC_OscConfig+0x376>
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800150c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150e:	4a5b      	ldr	r2, [pc, #364]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001510:	f023 0301 	bic.w	r3, r3, #1
 8001514:	6713      	str	r3, [r2, #112]	; 0x70
 8001516:	4b59      	ldr	r3, [pc, #356]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151a:	4a58      	ldr	r2, [pc, #352]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	689b      	ldr	r3, [r3, #8]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d015      	beq.n	8001556 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152a:	f7ff fb11 	bl	8000b50 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001530:	e00a      	b.n	8001548 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001532:	f7ff fb0d 	bl	8000b50 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001540:	4293      	cmp	r3, r2
 8001542:	d901      	bls.n	8001548 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001544:	2303      	movs	r3, #3
 8001546:	e0d8      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001548:	4b4c      	ldr	r3, [pc, #304]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800154a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800154c:	f003 0302 	and.w	r3, r3, #2
 8001550:	2b00      	cmp	r3, #0
 8001552:	d0ee      	beq.n	8001532 <HAL_RCC_OscConfig+0x386>
 8001554:	e014      	b.n	8001580 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001556:	f7ff fafb 	bl	8000b50 <HAL_GetTick>
 800155a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800155c:	e00a      	b.n	8001574 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800155e:	f7ff faf7 	bl	8000b50 <HAL_GetTick>
 8001562:	4602      	mov	r2, r0
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	1ad3      	subs	r3, r2, r3
 8001568:	f241 3288 	movw	r2, #5000	; 0x1388
 800156c:	4293      	cmp	r3, r2
 800156e:	d901      	bls.n	8001574 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001570:	2303      	movs	r3, #3
 8001572:	e0c2      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001574:	4b41      	ldr	r3, [pc, #260]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001578:	f003 0302 	and.w	r3, r3, #2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d1ee      	bne.n	800155e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001580:	7dfb      	ldrb	r3, [r7, #23]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d105      	bne.n	8001592 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001586:	4b3d      	ldr	r3, [pc, #244]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158a:	4a3c      	ldr	r2, [pc, #240]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800158c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001590:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80ae 	beq.w	80016f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800159c:	4b37      	ldr	r3, [pc, #220]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800159e:	689b      	ldr	r3, [r3, #8]
 80015a0:	f003 030c 	and.w	r3, r3, #12
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d06d      	beq.n	8001684 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	699b      	ldr	r3, [r3, #24]
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d14b      	bne.n	8001648 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b0:	4b32      	ldr	r3, [pc, #200]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a31      	ldr	r2, [pc, #196]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015bc:	f7ff fac8 	bl	8000b50 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015c4:	f7ff fac4 	bl	8000b50 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e091      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	4b29      	ldr	r3, [pc, #164]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d1f0      	bne.n	80015c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69da      	ldr	r2, [r3, #28]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f0:	019b      	lsls	r3, r3, #6
 80015f2:	431a      	orrs	r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	085b      	lsrs	r3, r3, #1
 80015fa:	3b01      	subs	r3, #1
 80015fc:	041b      	lsls	r3, r3, #16
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001604:	061b      	lsls	r3, r3, #24
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160c:	071b      	lsls	r3, r3, #28
 800160e:	491b      	ldr	r1, [pc, #108]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001610:	4313      	orrs	r3, r2
 8001612:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001614:	4b19      	ldr	r3, [pc, #100]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a18      	ldr	r2, [pc, #96]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800161a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800161e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fa96 	bl	8000b50 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001628:	f7ff fa92 	bl	8000b50 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e05f      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800163a:	4b10      	ldr	r3, [pc, #64]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d0f0      	beq.n	8001628 <HAL_RCC_OscConfig+0x47c>
 8001646:	e057      	b.n	80016f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001648:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a0b      	ldr	r2, [pc, #44]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 800164e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff fa7c 	bl	8000b50 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff fa78 	bl	8000b50 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e045      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b03      	ldr	r3, [pc, #12]	; (800167c <HAL_RCC_OscConfig+0x4d0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x4b0>
 800167a:	e03d      	b.n	80016f8 <HAL_RCC_OscConfig+0x54c>
 800167c:	40023800 	.word	0x40023800
 8001680:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001684:	4b1f      	ldr	r3, [pc, #124]	; (8001704 <HAL_RCC_OscConfig+0x558>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d030      	beq.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d129      	bne.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d122      	bne.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016b4:	4013      	ands	r3, r2
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016bc:	4293      	cmp	r3, r2
 80016be:	d119      	bne.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	085b      	lsrs	r3, r3, #1
 80016cc:	3b01      	subs	r3, #1
 80016ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d10f      	bne.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d107      	bne.n	80016f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d001      	beq.n	80016f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016f8:	2300      	movs	r3, #0
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40023800 	.word	0x40023800

08001708 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001712:	2300      	movs	r3, #0
 8001714:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d101      	bne.n	8001720 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800171c:	2301      	movs	r3, #1
 800171e:	e0d0      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001720:	4b6a      	ldr	r3, [pc, #424]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 030f 	and.w	r3, r3, #15
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d910      	bls.n	8001750 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800172e:	4b67      	ldr	r3, [pc, #412]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f023 020f 	bic.w	r2, r3, #15
 8001736:	4965      	ldr	r1, [pc, #404]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	4313      	orrs	r3, r2
 800173c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800173e:	4b63      	ldr	r3, [pc, #396]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	683a      	ldr	r2, [r7, #0]
 8001748:	429a      	cmp	r2, r3
 800174a:	d001      	beq.n	8001750 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e0b8      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0304 	and.w	r3, r3, #4
 8001764:	2b00      	cmp	r3, #0
 8001766:	d005      	beq.n	8001774 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	4a58      	ldr	r2, [pc, #352]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800176e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001772:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0308 	and.w	r3, r3, #8
 800177c:	2b00      	cmp	r3, #0
 800177e:	d005      	beq.n	800178c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001780:	4b53      	ldr	r3, [pc, #332]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4a52      	ldr	r2, [pc, #328]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001786:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800178a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800178c:	4b50      	ldr	r3, [pc, #320]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	494d      	ldr	r1, [pc, #308]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800179a:	4313      	orrs	r3, r2
 800179c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d040      	beq.n	800182c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d107      	bne.n	80017c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017b2:	4b47      	ldr	r3, [pc, #284]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d115      	bne.n	80017ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e07f      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d107      	bne.n	80017da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ca:	4b41      	ldr	r3, [pc, #260]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d109      	bne.n	80017ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e073      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017da:	4b3d      	ldr	r3, [pc, #244]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0302 	and.w	r3, r3, #2
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e06b      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017ea:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	f023 0203 	bic.w	r2, r3, #3
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4936      	ldr	r1, [pc, #216]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017fc:	f7ff f9a8 	bl	8000b50 <HAL_GetTick>
 8001800:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001802:	e00a      	b.n	800181a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001804:	f7ff f9a4 	bl	8000b50 <HAL_GetTick>
 8001808:	4602      	mov	r2, r0
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001812:	4293      	cmp	r3, r2
 8001814:	d901      	bls.n	800181a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e053      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800181a:	4b2d      	ldr	r3, [pc, #180]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	f003 020c 	and.w	r2, r3, #12
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	429a      	cmp	r2, r3
 800182a:	d1eb      	bne.n	8001804 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 030f 	and.w	r3, r3, #15
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d210      	bcs.n	800185c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800183a:	4b24      	ldr	r3, [pc, #144]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f023 020f 	bic.w	r2, r3, #15
 8001842:	4922      	ldr	r1, [pc, #136]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800184a:	4b20      	ldr	r3, [pc, #128]	; (80018cc <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 030f 	and.w	r3, r3, #15
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	429a      	cmp	r2, r3
 8001856:	d001      	beq.n	800185c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e032      	b.n	80018c2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0304 	and.w	r3, r3, #4
 8001864:	2b00      	cmp	r3, #0
 8001866:	d008      	beq.n	800187a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001868:	4b19      	ldr	r3, [pc, #100]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	4916      	ldr	r1, [pc, #88]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001876:	4313      	orrs	r3, r2
 8001878:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0308 	and.w	r3, r3, #8
 8001882:	2b00      	cmp	r3, #0
 8001884:	d009      	beq.n	800189a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001886:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	490e      	ldr	r1, [pc, #56]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800189a:	f000 f821 	bl	80018e0 <HAL_RCC_GetSysClockFreq>
 800189e:	4602      	mov	r2, r0
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	091b      	lsrs	r3, r3, #4
 80018a6:	f003 030f 	and.w	r3, r3, #15
 80018aa:	490a      	ldr	r1, [pc, #40]	; (80018d4 <HAL_RCC_ClockConfig+0x1cc>)
 80018ac:	5ccb      	ldrb	r3, [r1, r3]
 80018ae:	fa22 f303 	lsr.w	r3, r2, r3
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_RCC_ClockConfig+0x1d0>)
 80018b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018b6:	4b09      	ldr	r3, [pc, #36]	; (80018dc <HAL_RCC_ClockConfig+0x1d4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4618      	mov	r0, r3
 80018bc:	f7ff f874 	bl	80009a8 <HAL_InitTick>

  return HAL_OK;
 80018c0:	2300      	movs	r3, #0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40023c00 	.word	0x40023c00
 80018d0:	40023800 	.word	0x40023800
 80018d4:	08004e24 	.word	0x08004e24
 80018d8:	20000000 	.word	0x20000000
 80018dc:	20000004 	.word	0x20000004

080018e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018e4:	b094      	sub	sp, #80	; 0x50
 80018e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80018e8:	2300      	movs	r3, #0
 80018ea:	647b      	str	r3, [r7, #68]	; 0x44
 80018ec:	2300      	movs	r3, #0
 80018ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018f0:	2300      	movs	r3, #0
 80018f2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018f8:	4b79      	ldr	r3, [pc, #484]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f003 030c 	and.w	r3, r3, #12
 8001900:	2b08      	cmp	r3, #8
 8001902:	d00d      	beq.n	8001920 <HAL_RCC_GetSysClockFreq+0x40>
 8001904:	2b08      	cmp	r3, #8
 8001906:	f200 80e1 	bhi.w	8001acc <HAL_RCC_GetSysClockFreq+0x1ec>
 800190a:	2b00      	cmp	r3, #0
 800190c:	d002      	beq.n	8001914 <HAL_RCC_GetSysClockFreq+0x34>
 800190e:	2b04      	cmp	r3, #4
 8001910:	d003      	beq.n	800191a <HAL_RCC_GetSysClockFreq+0x3a>
 8001912:	e0db      	b.n	8001acc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001914:	4b73      	ldr	r3, [pc, #460]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001918:	e0db      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800191a:	4b73      	ldr	r3, [pc, #460]	; (8001ae8 <HAL_RCC_GetSysClockFreq+0x208>)
 800191c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191e:	e0d8      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001920:	4b6f      	ldr	r3, [pc, #444]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001928:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800192a:	4b6d      	ldr	r3, [pc, #436]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d063      	beq.n	80019fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b6a      	ldr	r3, [pc, #424]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	2200      	movs	r2, #0
 800193e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001940:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001944:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001948:	633b      	str	r3, [r7, #48]	; 0x30
 800194a:	2300      	movs	r3, #0
 800194c:	637b      	str	r3, [r7, #52]	; 0x34
 800194e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001952:	4622      	mov	r2, r4
 8001954:	462b      	mov	r3, r5
 8001956:	f04f 0000 	mov.w	r0, #0
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	0159      	lsls	r1, r3, #5
 8001960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001964:	0150      	lsls	r0, r2, #5
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4621      	mov	r1, r4
 800196c:	1a51      	subs	r1, r2, r1
 800196e:	6139      	str	r1, [r7, #16]
 8001970:	4629      	mov	r1, r5
 8001972:	eb63 0301 	sbc.w	r3, r3, r1
 8001976:	617b      	str	r3, [r7, #20]
 8001978:	f04f 0200 	mov.w	r2, #0
 800197c:	f04f 0300 	mov.w	r3, #0
 8001980:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001984:	4659      	mov	r1, fp
 8001986:	018b      	lsls	r3, r1, #6
 8001988:	4651      	mov	r1, sl
 800198a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800198e:	4651      	mov	r1, sl
 8001990:	018a      	lsls	r2, r1, #6
 8001992:	4651      	mov	r1, sl
 8001994:	ebb2 0801 	subs.w	r8, r2, r1
 8001998:	4659      	mov	r1, fp
 800199a:	eb63 0901 	sbc.w	r9, r3, r1
 800199e:	f04f 0200 	mov.w	r2, #0
 80019a2:	f04f 0300 	mov.w	r3, #0
 80019a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019b2:	4690      	mov	r8, r2
 80019b4:	4699      	mov	r9, r3
 80019b6:	4623      	mov	r3, r4
 80019b8:	eb18 0303 	adds.w	r3, r8, r3
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	462b      	mov	r3, r5
 80019c0:	eb49 0303 	adc.w	r3, r9, r3
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	f04f 0200 	mov.w	r2, #0
 80019ca:	f04f 0300 	mov.w	r3, #0
 80019ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019d2:	4629      	mov	r1, r5
 80019d4:	024b      	lsls	r3, r1, #9
 80019d6:	4621      	mov	r1, r4
 80019d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019dc:	4621      	mov	r1, r4
 80019de:	024a      	lsls	r2, r1, #9
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019e6:	2200      	movs	r2, #0
 80019e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80019ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019f0:	f7fe fc26 	bl	8000240 <__aeabi_uldivmod>
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	4613      	mov	r3, r2
 80019fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019fc:	e058      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fe:	4b38      	ldr	r3, [pc, #224]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	099b      	lsrs	r3, r3, #6
 8001a04:	2200      	movs	r2, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	4611      	mov	r1, r2
 8001a0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	2300      	movs	r3, #0
 8001a12:	627b      	str	r3, [r7, #36]	; 0x24
 8001a14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a18:	4642      	mov	r2, r8
 8001a1a:	464b      	mov	r3, r9
 8001a1c:	f04f 0000 	mov.w	r0, #0
 8001a20:	f04f 0100 	mov.w	r1, #0
 8001a24:	0159      	lsls	r1, r3, #5
 8001a26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a2a:	0150      	lsls	r0, r2, #5
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4641      	mov	r1, r8
 8001a32:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a36:	4649      	mov	r1, r9
 8001a38:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a50:	ebb2 040a 	subs.w	r4, r2, sl
 8001a54:	eb63 050b 	sbc.w	r5, r3, fp
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	00eb      	lsls	r3, r5, #3
 8001a62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a66:	00e2      	lsls	r2, r4, #3
 8001a68:	4614      	mov	r4, r2
 8001a6a:	461d      	mov	r5, r3
 8001a6c:	4643      	mov	r3, r8
 8001a6e:	18e3      	adds	r3, r4, r3
 8001a70:	603b      	str	r3, [r7, #0]
 8001a72:	464b      	mov	r3, r9
 8001a74:	eb45 0303 	adc.w	r3, r5, r3
 8001a78:	607b      	str	r3, [r7, #4]
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a86:	4629      	mov	r1, r5
 8001a88:	028b      	lsls	r3, r1, #10
 8001a8a:	4621      	mov	r1, r4
 8001a8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a90:	4621      	mov	r1, r4
 8001a92:	028a      	lsls	r2, r1, #10
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	61fa      	str	r2, [r7, #28]
 8001aa0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001aa4:	f7fe fbcc 	bl	8000240 <__aeabi_uldivmod>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4613      	mov	r3, r2
 8001aae:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ab0:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	0c1b      	lsrs	r3, r3, #16
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	3301      	adds	r3, #1
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ac0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aca:	e002      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001acc:	4b05      	ldr	r3, [pc, #20]	; (8001ae4 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ace:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001ad0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ad2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3750      	adds	r7, #80	; 0x50
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ade:	bf00      	nop
 8001ae0:	40023800 	.word	0x40023800
 8001ae4:	00f42400 	.word	0x00f42400
 8001ae8:	007a1200 	.word	0x007a1200

08001aec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001aec:	b480      	push	{r7}
 8001aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001af0:	4b03      	ldr	r3, [pc, #12]	; (8001b00 <HAL_RCC_GetHCLKFreq+0x14>)
 8001af2:	681b      	ldr	r3, [r3, #0]
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	20000000 	.word	0x20000000

08001b04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	f7ff fff0 	bl	8001aec <HAL_RCC_GetHCLKFreq>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	0a9b      	lsrs	r3, r3, #10
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	4903      	ldr	r1, [pc, #12]	; (8001b28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b1a:	5ccb      	ldrb	r3, [r1, r3]
 8001b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	40023800 	.word	0x40023800
 8001b28:	08004e34 	.word	0x08004e34

08001b2c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	220f      	movs	r2, #15
 8001b3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b3c:	4b12      	ldr	r3, [pc, #72]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f003 0203 	and.w	r2, r3, #3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_RCC_GetClockConfig+0x5c>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	08db      	lsrs	r3, r3, #3
 8001b66:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b6e:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <HAL_RCC_GetClockConfig+0x60>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 020f 	and.w	r2, r3, #15
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	601a      	str	r2, [r3, #0]
}
 8001b7a:	bf00      	nop
 8001b7c:	370c      	adds	r7, #12
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e049      	b.n	8001c36 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f841 	bl	8001c3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2202      	movs	r2, #2
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	3304      	adds	r3, #4
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4610      	mov	r0, r2
 8001bd0:	f000 fa00 	bl	8001fd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}

08001c3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	b083      	sub	sp, #12
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d001      	beq.n	8001c6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e054      	b.n	8001d16 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2202      	movs	r2, #2
 8001c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a26      	ldr	r2, [pc, #152]	; (8001d24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d022      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c96:	d01d      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a22      	ldr	r2, [pc, #136]	; (8001d28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d018      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a21      	ldr	r2, [pc, #132]	; (8001d2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d013      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a1f      	ldr	r2, [pc, #124]	; (8001d30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d00e      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1e      	ldr	r2, [pc, #120]	; (8001d34 <HAL_TIM_Base_Start_IT+0xe0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d009      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1c      	ldr	r2, [pc, #112]	; (8001d38 <HAL_TIM_Base_Start_IT+0xe4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d004      	beq.n	8001cd4 <HAL_TIM_Base_Start_IT+0x80>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a1b      	ldr	r2, [pc, #108]	; (8001d3c <HAL_TIM_Base_Start_IT+0xe8>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d115      	bne.n	8001d00 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_TIM_Base_Start_IT+0xec>)
 8001cdc:	4013      	ands	r3, r2
 8001cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b06      	cmp	r3, #6
 8001ce4:	d015      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0xbe>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cec:	d011      	beq.n	8001d12 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f042 0201 	orr.w	r2, r2, #1
 8001cfc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cfe:	e008      	b.n	8001d12 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f042 0201 	orr.w	r2, r2, #1
 8001d0e:	601a      	str	r2, [r3, #0]
 8001d10:	e000      	b.n	8001d14 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010000 	.word	0x40010000
 8001d28:	40000400 	.word	0x40000400
 8001d2c:	40000800 	.word	0x40000800
 8001d30:	40000c00 	.word	0x40000c00
 8001d34:	40010400 	.word	0x40010400
 8001d38:	40014000 	.word	0x40014000
 8001d3c:	40001800 	.word	0x40001800
 8001d40:	00010007 	.word	0x00010007

08001d44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b082      	sub	sp, #8
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	f003 0302 	and.w	r3, r3, #2
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d122      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d11b      	bne.n	8001da0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f06f 0202 	mvn.w	r2, #2
 8001d70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f003 0303 	and.w	r3, r3, #3
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d003      	beq.n	8001d8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f905 	bl	8001f96 <HAL_TIM_IC_CaptureCallback>
 8001d8c:	e005      	b.n	8001d9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f8f7 	bl	8001f82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f908 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	f003 0304 	and.w	r3, r3, #4
 8001daa:	2b04      	cmp	r3, #4
 8001dac:	d122      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	f003 0304 	and.w	r3, r3, #4
 8001db8:	2b04      	cmp	r3, #4
 8001dba:	d11b      	bne.n	8001df4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f06f 0204 	mvn.w	r2, #4
 8001dc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2202      	movs	r2, #2
 8001dca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	699b      	ldr	r3, [r3, #24]
 8001dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d003      	beq.n	8001de2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 f8db 	bl	8001f96 <HAL_TIM_IC_CaptureCallback>
 8001de0:	e005      	b.n	8001dee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f8cd 	bl	8001f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de8:	6878      	ldr	r0, [r7, #4]
 8001dea:	f000 f8de 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0308 	and.w	r3, r3, #8
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b08      	cmp	r3, #8
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0208 	mvn.w	r2, #8
 8001e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2204      	movs	r2, #4
 8001e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	69db      	ldr	r3, [r3, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f8b1 	bl	8001f96 <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f8a3 	bl	8001f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f8b4 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0310 	and.w	r3, r3, #16
 8001e52:	2b10      	cmp	r3, #16
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0310 	and.w	r3, r3, #16
 8001e60:	2b10      	cmp	r3, #16
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0210 	mvn.w	r2, #16
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2208      	movs	r2, #8
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f887 	bl	8001f96 <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f879 	bl	8001f82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f88a 	bl	8001faa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d10e      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0301 	and.w	r3, r3, #1
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d107      	bne.n	8001ec8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0201 	mvn.w	r2, #1
 8001ec0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f7fe fd30 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b80      	cmp	r3, #128	; 0x80
 8001ed4:	d10e      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee0:	2b80      	cmp	r3, #128	; 0x80
 8001ee2:	d107      	bne.n	8001ef4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001eec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f91a 	bl	8002128 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001efe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f02:	d10e      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68db      	ldr	r3, [r3, #12]
 8001f0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f0e:	2b80      	cmp	r3, #128	; 0x80
 8001f10:	d107      	bne.n	8001f22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f000 f90d 	bl	800213c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f2c:	2b40      	cmp	r3, #64	; 0x40
 8001f2e:	d10e      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f3a:	2b40      	cmp	r3, #64	; 0x40
 8001f3c:	d107      	bne.n	8001f4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f838 	bl	8001fbe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	f003 0320 	and.w	r3, r3, #32
 8001f58:	2b20      	cmp	r3, #32
 8001f5a:	d10e      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f003 0320 	and.w	r3, r3, #32
 8001f66:	2b20      	cmp	r3, #32
 8001f68:	d107      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f06f 0220 	mvn.w	r2, #32
 8001f72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 f8cd 	bl	8002114 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr

08001faa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b083      	sub	sp, #12
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001fb2:	bf00      	nop
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001fc6:	bf00      	nop
 8001fc8:	370c      	adds	r7, #12
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
	...

08001fd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a40      	ldr	r2, [pc, #256]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d013      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ff2:	d00f      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a3d      	ldr	r2, [pc, #244]	; (80020ec <TIM_Base_SetConfig+0x118>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d00b      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a3c      	ldr	r2, [pc, #240]	; (80020f0 <TIM_Base_SetConfig+0x11c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d007      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a3b      	ldr	r2, [pc, #236]	; (80020f4 <TIM_Base_SetConfig+0x120>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0x40>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a3a      	ldr	r2, [pc, #232]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d108      	bne.n	8002026 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800201a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	68fa      	ldr	r2, [r7, #12]
 8002022:	4313      	orrs	r3, r2
 8002024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a2f      	ldr	r2, [pc, #188]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d02b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002034:	d027      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a2c      	ldr	r2, [pc, #176]	; (80020ec <TIM_Base_SetConfig+0x118>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d023      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a2b      	ldr	r2, [pc, #172]	; (80020f0 <TIM_Base_SetConfig+0x11c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01f      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a2a      	ldr	r2, [pc, #168]	; (80020f4 <TIM_Base_SetConfig+0x120>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a29      	ldr	r2, [pc, #164]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d017      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a28      	ldr	r2, [pc, #160]	; (80020fc <TIM_Base_SetConfig+0x128>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <TIM_Base_SetConfig+0x12c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00f      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a26      	ldr	r2, [pc, #152]	; (8002104 <TIM_Base_SetConfig+0x130>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d00b      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a25      	ldr	r2, [pc, #148]	; (8002108 <TIM_Base_SetConfig+0x134>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d007      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a24      	ldr	r2, [pc, #144]	; (800210c <TIM_Base_SetConfig+0x138>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d003      	beq.n	8002086 <TIM_Base_SetConfig+0xb2>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a23      	ldr	r2, [pc, #140]	; (8002110 <TIM_Base_SetConfig+0x13c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d108      	bne.n	8002098 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	68db      	ldr	r3, [r3, #12]
 8002092:	68fa      	ldr	r2, [r7, #12]
 8002094:	4313      	orrs	r3, r2
 8002096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	695b      	ldr	r3, [r3, #20]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <TIM_Base_SetConfig+0x114>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d003      	beq.n	80020cc <TIM_Base_SetConfig+0xf8>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	4a0c      	ldr	r2, [pc, #48]	; (80020f8 <TIM_Base_SetConfig+0x124>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d103      	bne.n	80020d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	691a      	ldr	r2, [r3, #16]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2201      	movs	r2, #1
 80020d8:	615a      	str	r2, [r3, #20]
}
 80020da:	bf00      	nop
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40000400 	.word	0x40000400
 80020f0:	40000800 	.word	0x40000800
 80020f4:	40000c00 	.word	0x40000c00
 80020f8:	40010400 	.word	0x40010400
 80020fc:	40014000 	.word	0x40014000
 8002100:	40014400 	.word	0x40014400
 8002104:	40014800 	.word	0x40014800
 8002108:	40001800 	.word	0x40001800
 800210c:	40001c00 	.word	0x40001c00
 8002110:	40002000 	.word	0x40002000

08002114 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800211c:	bf00      	nop
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr

0800213c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002144:	bf00      	nop
 8002146:	370c      	adds	r7, #12
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr

08002150 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
	...

08002160 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002166:	f3ef 8305 	mrs	r3, IPSR
 800216a:	60bb      	str	r3, [r7, #8]
  return(result);
 800216c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800216e:	2b00      	cmp	r3, #0
 8002170:	d10f      	bne.n	8002192 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002172:	f3ef 8310 	mrs	r3, PRIMASK
 8002176:	607b      	str	r3, [r7, #4]
  return(result);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d105      	bne.n	800218a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800217e:	f3ef 8311 	mrs	r3, BASEPRI
 8002182:	603b      	str	r3, [r7, #0]
  return(result);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d007      	beq.n	800219a <osKernelInitialize+0x3a>
 800218a:	4b0e      	ldr	r3, [pc, #56]	; (80021c4 <osKernelInitialize+0x64>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d103      	bne.n	800219a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002192:	f06f 0305 	mvn.w	r3, #5
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	e00c      	b.n	80021b4 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800219a:	4b0a      	ldr	r3, [pc, #40]	; (80021c4 <osKernelInitialize+0x64>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d105      	bne.n	80021ae <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80021a2:	4b08      	ldr	r3, [pc, #32]	; (80021c4 <osKernelInitialize+0x64>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	e002      	b.n	80021b4 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80021ae:	f04f 33ff 	mov.w	r3, #4294967295
 80021b2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80021b4:	68fb      	ldr	r3, [r7, #12]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000088 	.word	0x20000088

080021c8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ce:	f3ef 8305 	mrs	r3, IPSR
 80021d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80021d4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d10f      	bne.n	80021fa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80021da:	f3ef 8310 	mrs	r3, PRIMASK
 80021de:	607b      	str	r3, [r7, #4]
  return(result);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80021e6:	f3ef 8311 	mrs	r3, BASEPRI
 80021ea:	603b      	str	r3, [r7, #0]
  return(result);
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d007      	beq.n	8002202 <osKernelStart+0x3a>
 80021f2:	4b0f      	ldr	r3, [pc, #60]	; (8002230 <osKernelStart+0x68>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d103      	bne.n	8002202 <osKernelStart+0x3a>
    stat = osErrorISR;
 80021fa:	f06f 0305 	mvn.w	r3, #5
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	e010      	b.n	8002224 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <osKernelStart+0x68>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d109      	bne.n	800221e <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800220a:	f7ff ffa1 	bl	8002150 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <osKernelStart+0x68>)
 8002210:	2202      	movs	r2, #2
 8002212:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002214:	f001 f8b4 	bl	8003380 <vTaskStartScheduler>
      stat = osOK;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	e002      	b.n	8002224 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002224:	68fb      	ldr	r3, [r7, #12]
}
 8002226:	4618      	mov	r0, r3
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000088 	.word	0x20000088

08002234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8002234:	b580      	push	{r7, lr}
 8002236:	b090      	sub	sp, #64	; 0x40
 8002238:	af04      	add	r7, sp, #16
 800223a:	60f8      	str	r0, [r7, #12]
 800223c:	60b9      	str	r1, [r7, #8]
 800223e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002240:	2300      	movs	r3, #0
 8002242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002244:	f3ef 8305 	mrs	r3, IPSR
 8002248:	61fb      	str	r3, [r7, #28]
  return(result);
 800224a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800224c:	2b00      	cmp	r3, #0
 800224e:	f040 808f 	bne.w	8002370 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002252:	f3ef 8310 	mrs	r3, PRIMASK
 8002256:	61bb      	str	r3, [r7, #24]
  return(result);
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d105      	bne.n	800226a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800225e:	f3ef 8311 	mrs	r3, BASEPRI
 8002262:	617b      	str	r3, [r7, #20]
  return(result);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d003      	beq.n	8002272 <osThreadNew+0x3e>
 800226a:	4b44      	ldr	r3, [pc, #272]	; (800237c <osThreadNew+0x148>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2b02      	cmp	r3, #2
 8002270:	d07e      	beq.n	8002370 <osThreadNew+0x13c>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d07b      	beq.n	8002370 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8002278:	2380      	movs	r3, #128	; 0x80
 800227a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800227c:	2318      	movs	r3, #24
 800227e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8002280:	2300      	movs	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d045      	beq.n	800231c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d002      	beq.n	800229e <osThreadNew+0x6a>
        name = attr->name;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	699b      	ldr	r3, [r3, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d002      	beq.n	80022ac <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d008      	beq.n	80022c4 <osThreadNew+0x90>
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b38      	cmp	r3, #56	; 0x38
 80022b6:	d805      	bhi.n	80022c4 <osThreadNew+0x90>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d001      	beq.n	80022c8 <osThreadNew+0x94>
        return (NULL);
 80022c4:	2300      	movs	r3, #0
 80022c6:	e054      	b.n	8002372 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	695b      	ldr	r3, [r3, #20]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	695b      	ldr	r3, [r3, #20]
 80022d4:	089b      	lsrs	r3, r3, #2
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d00e      	beq.n	80022fe <osThreadNew+0xca>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	2b5b      	cmp	r3, #91	; 0x5b
 80022e6:	d90a      	bls.n	80022fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d002      	beq.n	80022fe <osThreadNew+0xca>
        mem = 1;
 80022f8:	2301      	movs	r3, #1
 80022fa:	623b      	str	r3, [r7, #32]
 80022fc:	e010      	b.n	8002320 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d10c      	bne.n	8002320 <osThreadNew+0xec>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	68db      	ldr	r3, [r3, #12]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d108      	bne.n	8002320 <osThreadNew+0xec>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d104      	bne.n	8002320 <osThreadNew+0xec>
          mem = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	623b      	str	r3, [r7, #32]
 800231a:	e001      	b.n	8002320 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800231c:	2300      	movs	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d110      	bne.n	8002348 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800232e:	9202      	str	r2, [sp, #8]
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800233a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800233c:	68f8      	ldr	r0, [r7, #12]
 800233e:	f000 fe3f 	bl	8002fc0 <xTaskCreateStatic>
 8002342:	4603      	mov	r3, r0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	e013      	b.n	8002370 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8002348:	6a3b      	ldr	r3, [r7, #32]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d110      	bne.n	8002370 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800234e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002350:	b29a      	uxth	r2, r3
 8002352:	f107 0310 	add.w	r3, r7, #16
 8002356:	9301      	str	r3, [sp, #4]
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	9300      	str	r3, [sp, #0]
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002360:	68f8      	ldr	r0, [r7, #12]
 8002362:	f000 fe90 	bl	8003086 <xTaskCreate>
 8002366:	4603      	mov	r3, r0
 8002368:	2b01      	cmp	r3, #1
 800236a:	d001      	beq.n	8002370 <osThreadNew+0x13c>
          hTask = NULL;
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002370:	693b      	ldr	r3, [r7, #16]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3730      	adds	r7, #48	; 0x30
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	20000088 	.word	0x20000088

08002380 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002388:	f3ef 8305 	mrs	r3, IPSR
 800238c:	613b      	str	r3, [r7, #16]
  return(result);
 800238e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002390:	2b00      	cmp	r3, #0
 8002392:	d10f      	bne.n	80023b4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002394:	f3ef 8310 	mrs	r3, PRIMASK
 8002398:	60fb      	str	r3, [r7, #12]
  return(result);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d105      	bne.n	80023ac <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023a0:	f3ef 8311 	mrs	r3, BASEPRI
 80023a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d007      	beq.n	80023bc <osDelay+0x3c>
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <osDelay+0x58>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d103      	bne.n	80023bc <osDelay+0x3c>
    stat = osErrorISR;
 80023b4:	f06f 0305 	mvn.w	r3, #5
 80023b8:	617b      	str	r3, [r7, #20]
 80023ba:	e007      	b.n	80023cc <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <osDelay+0x4c>
      vTaskDelay(ticks);
 80023c6:	6878      	ldr	r0, [r7, #4]
 80023c8:	f000 ffa4 	bl	8003314 <vTaskDelay>
    }
  }

  return (stat);
 80023cc:	697b      	ldr	r3, [r7, #20]
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	20000088 	.word	0x20000088

080023dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a07      	ldr	r2, [pc, #28]	; (8002408 <vApplicationGetIdleTaskMemory+0x2c>)
 80023ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	4a06      	ldr	r2, [pc, #24]	; (800240c <vApplicationGetIdleTaskMemory+0x30>)
 80023f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2280      	movs	r2, #128	; 0x80
 80023f8:	601a      	str	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	2000008c 	.word	0x2000008c
 800240c:	200000e8 	.word	0x200000e8

08002410 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	60f8      	str	r0, [r7, #12]
 8002418:	60b9      	str	r1, [r7, #8]
 800241a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	4a07      	ldr	r2, [pc, #28]	; (800243c <vApplicationGetTimerTaskMemory+0x2c>)
 8002420:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	4a06      	ldr	r2, [pc, #24]	; (8002440 <vApplicationGetTimerTaskMemory+0x30>)
 8002426:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800242e:	601a      	str	r2, [r3, #0]
}
 8002430:	bf00      	nop
 8002432:	3714      	adds	r7, #20
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	200002e8 	.word	0x200002e8
 8002440:	20000344 	.word	0x20000344

08002444 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002444:	b480      	push	{r7}
 8002446:	b083      	sub	sp, #12
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f103 0208 	add.w	r2, r3, #8
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	f04f 32ff 	mov.w	r2, #4294967295
 800245c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	f103 0208 	add.w	r2, r3, #8
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f103 0208 	add.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2200      	movs	r2, #0
 8002476:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2200      	movs	r2, #0
 8002490:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002492:	bf00      	nop
 8002494:	370c      	adds	r7, #12
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr

0800249e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	601a      	str	r2, [r3, #0]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80024e6:	b480      	push	{r7}
 80024e8:	b085      	sub	sp, #20
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
 80024ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024fc:	d103      	bne.n	8002506 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	60fb      	str	r3, [r7, #12]
 8002504:	e00c      	b.n	8002520 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	3308      	adds	r3, #8
 800250a:	60fb      	str	r3, [r7, #12]
 800250c:	e002      	b.n	8002514 <vListInsert+0x2e>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d2f6      	bcs.n	800250e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	685a      	ldr	r2, [r3, #4]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	68fa      	ldr	r2, [r7, #12]
 8002534:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	683a      	ldr	r2, [r7, #0]
 800253a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	601a      	str	r2, [r3, #0]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6892      	ldr	r2, [r2, #8]
 800256e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6852      	ldr	r2, [r2, #4]
 8002578:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d103      	bne.n	800258c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2200      	movs	r2, #0
 8002590:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	1e5a      	subs	r2, r3, #1
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10c      	bne.n	80025da <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c4:	b672      	cpsid	i
 80025c6:	f383 8811 	msr	BASEPRI, r3
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	f3bf 8f4f 	dsb	sy
 80025d2:	b662      	cpsie	i
 80025d4:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80025d6:	bf00      	nop
 80025d8:	e7fe      	b.n	80025d8 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80025da:	f002 f87f 	bl	80046dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	68f9      	ldr	r1, [r7, #12]
 80025e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	441a      	add	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800260a:	3b01      	subs	r3, #1
 800260c:	68f9      	ldr	r1, [r7, #12]
 800260e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002610:	fb01 f303 	mul.w	r3, r1, r3
 8002614:	441a      	add	r2, r3
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	22ff      	movs	r2, #255	; 0xff
 8002626:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d114      	bne.n	800265a <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d01a      	beq.n	800266e <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	3310      	adds	r3, #16
 800263c:	4618      	mov	r0, r3
 800263e:	f001 f937 	bl	80038b0 <xTaskRemoveFromEventList>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d012      	beq.n	800266e <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002648:	4b0c      	ldr	r3, [pc, #48]	; (800267c <xQueueGenericReset+0xd0>)
 800264a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800264e:	601a      	str	r2, [r3, #0]
 8002650:	f3bf 8f4f 	dsb	sy
 8002654:	f3bf 8f6f 	isb	sy
 8002658:	e009      	b.n	800266e <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	3310      	adds	r3, #16
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fef0 	bl	8002444 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	3324      	adds	r3, #36	; 0x24
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff feeb 	bl	8002444 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800266e:	f002 f869 	bl	8004744 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002672:	2301      	movs	r3, #1
}
 8002674:	4618      	mov	r0, r3
 8002676:	3710      	adds	r7, #16
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	e000ed04 	.word	0xe000ed04

08002680 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af02      	add	r7, sp, #8
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10c      	bne.n	80026ae <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002694:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002698:	b672      	cpsid	i
 800269a:	f383 8811 	msr	BASEPRI, r3
 800269e:	f3bf 8f6f 	isb	sy
 80026a2:	f3bf 8f4f 	dsb	sy
 80026a6:	b662      	cpsie	i
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026aa:	bf00      	nop
 80026ac:	e7fe      	b.n	80026ac <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10c      	bne.n	80026ce <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80026b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026b8:	b672      	cpsid	i
 80026ba:	f383 8811 	msr	BASEPRI, r3
 80026be:	f3bf 8f6f 	isb	sy
 80026c2:	f3bf 8f4f 	dsb	sy
 80026c6:	b662      	cpsie	i
 80026c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <xQueueGenericCreateStatic+0x5a>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <xQueueGenericCreateStatic+0x5e>
 80026da:	2301      	movs	r3, #1
 80026dc:	e000      	b.n	80026e0 <xQueueGenericCreateStatic+0x60>
 80026de:	2300      	movs	r3, #0
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10c      	bne.n	80026fe <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80026e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e8:	b672      	cpsid	i
 80026ea:	f383 8811 	msr	BASEPRI, r3
 80026ee:	f3bf 8f6f 	isb	sy
 80026f2:	f3bf 8f4f 	dsb	sy
 80026f6:	b662      	cpsie	i
 80026f8:	623b      	str	r3, [r7, #32]
}
 80026fa:	bf00      	nop
 80026fc:	e7fe      	b.n	80026fc <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d102      	bne.n	800270a <xQueueGenericCreateStatic+0x8a>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <xQueueGenericCreateStatic+0x8e>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <xQueueGenericCreateStatic+0x90>
 800270e:	2300      	movs	r3, #0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10c      	bne.n	800272e <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002718:	b672      	cpsid	i
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	b662      	cpsie	i
 8002728:	61fb      	str	r3, [r7, #28]
}
 800272a:	bf00      	nop
 800272c:	e7fe      	b.n	800272c <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800272e:	2350      	movs	r3, #80	; 0x50
 8002730:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2b50      	cmp	r3, #80	; 0x50
 8002736:	d00c      	beq.n	8002752 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800273c:	b672      	cpsid	i
 800273e:	f383 8811 	msr	BASEPRI, r3
 8002742:	f3bf 8f6f 	isb	sy
 8002746:	f3bf 8f4f 	dsb	sy
 800274a:	b662      	cpsie	i
 800274c:	61bb      	str	r3, [r7, #24]
}
 800274e:	bf00      	nop
 8002750:	e7fe      	b.n	8002750 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002752:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00d      	beq.n	800277a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002766:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800276a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800276c:	9300      	str	r3, [sp, #0]
 800276e:	4613      	mov	r3, r2
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	68b9      	ldr	r1, [r7, #8]
 8002774:	68f8      	ldr	r0, [r7, #12]
 8002776:	f000 f805 	bl	8002784 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800277c:	4618      	mov	r0, r3
 800277e:	3730      	adds	r7, #48	; 0x30
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b084      	sub	sp, #16
 8002788:	af00      	add	r7, sp, #0
 800278a:	60f8      	str	r0, [r7, #12]
 800278c:	60b9      	str	r1, [r7, #8]
 800278e:	607a      	str	r2, [r7, #4]
 8002790:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d103      	bne.n	80027a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	e002      	b.n	80027a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	68ba      	ldr	r2, [r7, #8]
 80027b0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027b2:	2101      	movs	r1, #1
 80027b4:	69b8      	ldr	r0, [r7, #24]
 80027b6:	f7ff fef9 	bl	80025ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80027ba:	69bb      	ldr	r3, [r7, #24]
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80027c2:	bf00      	nop
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08e      	sub	sp, #56	; 0x38
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80027da:	2300      	movs	r3, #0
 80027dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80027e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10c      	bne.n	8002802 <xQueueGenericSend+0x36>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	b672      	cpsid	i
 80027ee:	f383 8811 	msr	BASEPRI, r3
 80027f2:	f3bf 8f6f 	isb	sy
 80027f6:	f3bf 8f4f 	dsb	sy
 80027fa:	b662      	cpsie	i
 80027fc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80027fe:	bf00      	nop
 8002800:	e7fe      	b.n	8002800 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d103      	bne.n	8002810 <xQueueGenericSend+0x44>
 8002808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <xQueueGenericSend+0x48>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <xQueueGenericSend+0x4a>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10c      	bne.n	8002834 <xQueueGenericSend+0x68>
	__asm volatile
 800281a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281e:	b672      	cpsid	i
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	b662      	cpsie	i
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002830:	bf00      	nop
 8002832:	e7fe      	b.n	8002832 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	2b02      	cmp	r3, #2
 8002838:	d103      	bne.n	8002842 <xQueueGenericSend+0x76>
 800283a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <xQueueGenericSend+0x7a>
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <xQueueGenericSend+0x7c>
 8002846:	2300      	movs	r3, #0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d10c      	bne.n	8002866 <xQueueGenericSend+0x9a>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	b672      	cpsid	i
 8002852:	f383 8811 	msr	BASEPRI, r3
 8002856:	f3bf 8f6f 	isb	sy
 800285a:	f3bf 8f4f 	dsb	sy
 800285e:	b662      	cpsie	i
 8002860:	623b      	str	r3, [r7, #32]
}
 8002862:	bf00      	nop
 8002864:	e7fe      	b.n	8002864 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002866:	f001 f9e9 	bl	8003c3c <xTaskGetSchedulerState>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d102      	bne.n	8002876 <xQueueGenericSend+0xaa>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <xQueueGenericSend+0xae>
 8002876:	2301      	movs	r3, #1
 8002878:	e000      	b.n	800287c <xQueueGenericSend+0xb0>
 800287a:	2300      	movs	r3, #0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d10c      	bne.n	800289a <xQueueGenericSend+0xce>
	__asm volatile
 8002880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002884:	b672      	cpsid	i
 8002886:	f383 8811 	msr	BASEPRI, r3
 800288a:	f3bf 8f6f 	isb	sy
 800288e:	f3bf 8f4f 	dsb	sy
 8002892:	b662      	cpsie	i
 8002894:	61fb      	str	r3, [r7, #28]
}
 8002896:	bf00      	nop
 8002898:	e7fe      	b.n	8002898 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800289a:	f001 ff1f 	bl	80046dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d302      	bcc.n	80028b0 <xQueueGenericSend+0xe4>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d129      	bne.n	8002904 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028b6:	f000 fa15 	bl	8002ce4 <prvCopyDataToQueue>
 80028ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d010      	beq.n	80028e6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	4618      	mov	r0, r3
 80028ca:	f000 fff1 	bl	80038b0 <xTaskRemoveFromEventList>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d013      	beq.n	80028fc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80028d4:	4b3f      	ldr	r3, [pc, #252]	; (80029d4 <xQueueGenericSend+0x208>)
 80028d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	f3bf 8f6f 	isb	sy
 80028e4:	e00a      	b.n	80028fc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80028e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d007      	beq.n	80028fc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80028ec:	4b39      	ldr	r3, [pc, #228]	; (80029d4 <xQueueGenericSend+0x208>)
 80028ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	f3bf 8f4f 	dsb	sy
 80028f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80028fc:	f001 ff22 	bl	8004744 <vPortExitCritical>
				return pdPASS;
 8002900:	2301      	movs	r3, #1
 8002902:	e063      	b.n	80029cc <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d103      	bne.n	8002912 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800290a:	f001 ff1b 	bl	8004744 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800290e:	2300      	movs	r3, #0
 8002910:	e05c      	b.n	80029cc <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002914:	2b00      	cmp	r3, #0
 8002916:	d106      	bne.n	8002926 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002918:	f107 0314 	add.w	r3, r7, #20
 800291c:	4618      	mov	r0, r3
 800291e:	f001 f82d 	bl	800397c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002922:	2301      	movs	r3, #1
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002926:	f001 ff0d 	bl	8004744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800292a:	f000 fd93 	bl	8003454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800292e:	f001 fed5 	bl	80046dc <vPortEnterCritical>
 8002932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002934:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002938:	b25b      	sxtb	r3, r3
 800293a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293e:	d103      	bne.n	8002948 <xQueueGenericSend+0x17c>
 8002940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800294e:	b25b      	sxtb	r3, r3
 8002950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002954:	d103      	bne.n	800295e <xQueueGenericSend+0x192>
 8002956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800295e:	f001 fef1 	bl	8004744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002962:	1d3a      	adds	r2, r7, #4
 8002964:	f107 0314 	add.w	r3, r7, #20
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f001 f81c 	bl	80039a8 <xTaskCheckForTimeOut>
 8002970:	4603      	mov	r3, r0
 8002972:	2b00      	cmp	r3, #0
 8002974:	d124      	bne.n	80029c0 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002976:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002978:	f000 faac 	bl	8002ed4 <prvIsQueueFull>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d018      	beq.n	80029b4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002984:	3310      	adds	r3, #16
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f000 ff3c 	bl	8003808 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002990:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002992:	f000 fa37 	bl	8002e04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002996:	f000 fd6b 	bl	8003470 <xTaskResumeAll>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	f47f af7c 	bne.w	800289a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80029a2:	4b0c      	ldr	r3, [pc, #48]	; (80029d4 <xQueueGenericSend+0x208>)
 80029a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	f3bf 8f6f 	isb	sy
 80029b2:	e772      	b.n	800289a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b6:	f000 fa25 	bl	8002e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029ba:	f000 fd59 	bl	8003470 <xTaskResumeAll>
 80029be:	e76c      	b.n	800289a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029c2:	f000 fa1f 	bl	8002e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80029c6:	f000 fd53 	bl	8003470 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80029ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3738      	adds	r7, #56	; 0x38
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	e000ed04 	.word	0xe000ed04

080029d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08e      	sub	sp, #56	; 0x38
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80029ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d10c      	bne.n	8002a0a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80029f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029f4:	b672      	cpsid	i
 80029f6:	f383 8811 	msr	BASEPRI, r3
 80029fa:	f3bf 8f6f 	isb	sy
 80029fe:	f3bf 8f4f 	dsb	sy
 8002a02:	b662      	cpsie	i
 8002a04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a06:	bf00      	nop
 8002a08:	e7fe      	b.n	8002a08 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a0a:	68bb      	ldr	r3, [r7, #8]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d103      	bne.n	8002a18 <xQueueGenericSendFromISR+0x40>
 8002a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d101      	bne.n	8002a1c <xQueueGenericSendFromISR+0x44>
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e000      	b.n	8002a1e <xQueueGenericSendFromISR+0x46>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d10c      	bne.n	8002a3c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a26:	b672      	cpsid	i
 8002a28:	f383 8811 	msr	BASEPRI, r3
 8002a2c:	f3bf 8f6f 	isb	sy
 8002a30:	f3bf 8f4f 	dsb	sy
 8002a34:	b662      	cpsie	i
 8002a36:	623b      	str	r3, [r7, #32]
}
 8002a38:	bf00      	nop
 8002a3a:	e7fe      	b.n	8002a3a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d103      	bne.n	8002a4a <xQueueGenericSendFromISR+0x72>
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <xQueueGenericSendFromISR+0x76>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <xQueueGenericSendFromISR+0x78>
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d10c      	bne.n	8002a6e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a58:	b672      	cpsid	i
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	b662      	cpsie	i
 8002a68:	61fb      	str	r3, [r7, #28]
}
 8002a6a:	bf00      	nop
 8002a6c:	e7fe      	b.n	8002a6c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a6e:	f001 ff1d 	bl	80048ac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002a72:	f3ef 8211 	mrs	r2, BASEPRI
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	b672      	cpsid	i
 8002a7c:	f383 8811 	msr	BASEPRI, r3
 8002a80:	f3bf 8f6f 	isb	sy
 8002a84:	f3bf 8f4f 	dsb	sy
 8002a88:	b662      	cpsie	i
 8002a8a:	61ba      	str	r2, [r7, #24]
 8002a8c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002a8e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a90:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d302      	bcc.n	8002aa4 <xQueueGenericSendFromISR+0xcc>
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d12c      	bne.n	8002afe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002aae:	683a      	ldr	r2, [r7, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002ab4:	f000 f916 	bl	8002ce4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002ab8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002abc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac0:	d112      	bne.n	8002ae8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d016      	beq.n	8002af8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002acc:	3324      	adds	r3, #36	; 0x24
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f000 feee 	bl	80038b0 <xTaskRemoveFromEventList>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00e      	beq.n	8002af8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00b      	beq.n	8002af8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
 8002ae6:	e007      	b.n	8002af8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002ae8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002aec:	3301      	adds	r3, #1
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	b25a      	sxtb	r2, r3
 8002af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002af8:	2301      	movs	r3, #1
 8002afa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002afc:	e001      	b.n	8002b02 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	637b      	str	r3, [r7, #52]	; 0x34
 8002b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b04:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b0c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3738      	adds	r7, #56	; 0x38
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08c      	sub	sp, #48	; 0x30
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <xQueueReceive+0x34>
	__asm volatile
 8002b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b36:	b672      	cpsid	i
 8002b38:	f383 8811 	msr	BASEPRI, r3
 8002b3c:	f3bf 8f6f 	isb	sy
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	b662      	cpsie	i
 8002b46:	623b      	str	r3, [r7, #32]
}
 8002b48:	bf00      	nop
 8002b4a:	e7fe      	b.n	8002b4a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d103      	bne.n	8002b5a <xQueueReceive+0x42>
 8002b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <xQueueReceive+0x46>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e000      	b.n	8002b60 <xQueueReceive+0x48>
 8002b5e:	2300      	movs	r3, #0
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d10c      	bne.n	8002b7e <xQueueReceive+0x66>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	b672      	cpsid	i
 8002b6a:	f383 8811 	msr	BASEPRI, r3
 8002b6e:	f3bf 8f6f 	isb	sy
 8002b72:	f3bf 8f4f 	dsb	sy
 8002b76:	b662      	cpsie	i
 8002b78:	61fb      	str	r3, [r7, #28]
}
 8002b7a:	bf00      	nop
 8002b7c:	e7fe      	b.n	8002b7c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b7e:	f001 f85d 	bl	8003c3c <xTaskGetSchedulerState>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d102      	bne.n	8002b8e <xQueueReceive+0x76>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <xQueueReceive+0x7a>
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e000      	b.n	8002b94 <xQueueReceive+0x7c>
 8002b92:	2300      	movs	r3, #0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10c      	bne.n	8002bb2 <xQueueReceive+0x9a>
	__asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b9c:	b672      	cpsid	i
 8002b9e:	f383 8811 	msr	BASEPRI, r3
 8002ba2:	f3bf 8f6f 	isb	sy
 8002ba6:	f3bf 8f4f 	dsb	sy
 8002baa:	b662      	cpsie	i
 8002bac:	61bb      	str	r3, [r7, #24]
}
 8002bae:	bf00      	nop
 8002bb0:	e7fe      	b.n	8002bb0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002bb2:	f001 fd93 	bl	80046dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bba:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d01f      	beq.n	8002c02 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002bc2:	68b9      	ldr	r1, [r7, #8]
 8002bc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bc6:	f000 f8f7 	bl	8002db8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	1e5a      	subs	r2, r3, #1
 8002bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bd4:	691b      	ldr	r3, [r3, #16]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00f      	beq.n	8002bfa <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bdc:	3310      	adds	r3, #16
 8002bde:	4618      	mov	r0, r3
 8002be0:	f000 fe66 	bl	80038b0 <xTaskRemoveFromEventList>
 8002be4:	4603      	mov	r3, r0
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d007      	beq.n	8002bfa <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <xQueueReceive+0x1c8>)
 8002bec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf0:	601a      	str	r2, [r3, #0]
 8002bf2:	f3bf 8f4f 	dsb	sy
 8002bf6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002bfa:	f001 fda3 	bl	8004744 <vPortExitCritical>
				return pdPASS;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e069      	b.n	8002cd6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d103      	bne.n	8002c10 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002c08:	f001 fd9c 	bl	8004744 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	e062      	b.n	8002cd6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d106      	bne.n	8002c24 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c16:	f107 0310 	add.w	r3, r7, #16
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 feae 	bl	800397c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c20:	2301      	movs	r3, #1
 8002c22:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c24:	f001 fd8e 	bl	8004744 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c28:	f000 fc14 	bl	8003454 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c2c:	f001 fd56 	bl	80046dc <vPortEnterCritical>
 8002c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c36:	b25b      	sxtb	r3, r3
 8002c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c3c:	d103      	bne.n	8002c46 <xQueueReceive+0x12e>
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	2200      	movs	r2, #0
 8002c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c4c:	b25b      	sxtb	r3, r3
 8002c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c52:	d103      	bne.n	8002c5c <xQueueReceive+0x144>
 8002c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c5c:	f001 fd72 	bl	8004744 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c60:	1d3a      	adds	r2, r7, #4
 8002c62:	f107 0310 	add.w	r3, r7, #16
 8002c66:	4611      	mov	r1, r2
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 fe9d 	bl	80039a8 <xTaskCheckForTimeOut>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d123      	bne.n	8002cbc <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c76:	f000 f917 	bl	8002ea8 <prvIsQueueEmpty>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d017      	beq.n	8002cb0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c82:	3324      	adds	r3, #36	; 0x24
 8002c84:	687a      	ldr	r2, [r7, #4]
 8002c86:	4611      	mov	r1, r2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f000 fdbd 	bl	8003808 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c90:	f000 f8b8 	bl	8002e04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c94:	f000 fbec 	bl	8003470 <xTaskResumeAll>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d189      	bne.n	8002bb2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <xQueueReceive+0x1c8>)
 8002ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ca4:	601a      	str	r2, [r3, #0]
 8002ca6:	f3bf 8f4f 	dsb	sy
 8002caa:	f3bf 8f6f 	isb	sy
 8002cae:	e780      	b.n	8002bb2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cb2:	f000 f8a7 	bl	8002e04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cb6:	f000 fbdb 	bl	8003470 <xTaskResumeAll>
 8002cba:	e77a      	b.n	8002bb2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002cbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cbe:	f000 f8a1 	bl	8002e04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cc2:	f000 fbd5 	bl	8003470 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002cc8:	f000 f8ee 	bl	8002ea8 <prvIsQueueEmpty>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f43f af6f 	beq.w	8002bb2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002cd4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3730      	adds	r7, #48	; 0x30
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	e000ed04 	.word	0xe000ed04

08002ce4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b086      	sub	sp, #24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10d      	bne.n	8002d1e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d14d      	bne.n	8002da6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f000 ffb2 	bl	8003c78 <xTaskPriorityDisinherit>
 8002d14:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	609a      	str	r2, [r3, #8]
 8002d1c:	e043      	b.n	8002da6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d119      	bne.n	8002d58 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6858      	ldr	r0, [r3, #4]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	68b9      	ldr	r1, [r7, #8]
 8002d30:	f002 f808 	bl	8004d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3c:	441a      	add	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	685a      	ldr	r2, [r3, #4]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	d32b      	bcc.n	8002da6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	605a      	str	r2, [r3, #4]
 8002d56:	e026      	b.n	8002da6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	68d8      	ldr	r0, [r3, #12]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d60:	461a      	mov	r2, r3
 8002d62:	68b9      	ldr	r1, [r7, #8]
 8002d64:	f001 ffee 	bl	8004d44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	68da      	ldr	r2, [r3, #12]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d70:	425b      	negs	r3, r3
 8002d72:	441a      	add	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	68da      	ldr	r2, [r3, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d207      	bcs.n	8002d94 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	689a      	ldr	r2, [r3, #8]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8c:	425b      	negs	r3, r3
 8002d8e:	441a      	add	r2, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d105      	bne.n	8002da6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d002      	beq.n	8002da6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	1c5a      	adds	r2, r3, #1
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002dae:	697b      	ldr	r3, [r7, #20]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d018      	beq.n	8002dfc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	68da      	ldr	r2, [r3, #12]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	441a      	add	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	68da      	ldr	r2, [r3, #12]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d303      	bcc.n	8002dec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68d9      	ldr	r1, [r3, #12]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df4:	461a      	mov	r2, r3
 8002df6:	6838      	ldr	r0, [r7, #0]
 8002df8:	f001 ffa4 	bl	8004d44 <memcpy>
	}
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002e0c:	f001 fc66 	bl	80046dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e18:	e011      	b.n	8002e3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d012      	beq.n	8002e48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	3324      	adds	r3, #36	; 0x24
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 fd42 	bl	80038b0 <xTaskRemoveFromEventList>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002e32:	f000 fe1f 	bl	8003a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002e36:	7bfb      	ldrb	r3, [r7, #15]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	dce9      	bgt.n	8002e1a <prvUnlockQueue+0x16>
 8002e46:	e000      	b.n	8002e4a <prvUnlockQueue+0x46>
					break;
 8002e48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	22ff      	movs	r2, #255	; 0xff
 8002e4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002e52:	f001 fc77 	bl	8004744 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002e56:	f001 fc41 	bl	80046dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e62:	e011      	b.n	8002e88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d012      	beq.n	8002e92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3310      	adds	r3, #16
 8002e70:	4618      	mov	r0, r3
 8002e72:	f000 fd1d 	bl	80038b0 <xTaskRemoveFromEventList>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002e7c:	f000 fdfa 	bl	8003a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002e80:	7bbb      	ldrb	r3, [r7, #14]
 8002e82:	3b01      	subs	r3, #1
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002e88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dce9      	bgt.n	8002e64 <prvUnlockQueue+0x60>
 8002e90:	e000      	b.n	8002e94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002e92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	22ff      	movs	r2, #255	; 0xff
 8002e98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002e9c:	f001 fc52 	bl	8004744 <vPortExitCritical>
}
 8002ea0:	bf00      	nop
 8002ea2:	3710      	adds	r7, #16
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}

08002ea8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b084      	sub	sp, #16
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002eb0:	f001 fc14 	bl	80046dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	e001      	b.n	8002ec6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ec6:	f001 fc3d 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}

08002ed4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b084      	sub	sp, #16
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002edc:	f001 fbfe 	bl	80046dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d102      	bne.n	8002ef2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002eec:	2301      	movs	r3, #1
 8002eee:	60fb      	str	r3, [r7, #12]
 8002ef0:	e001      	b.n	8002ef6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002ef6:	f001 fc25 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8002efa:	68fb      	ldr	r3, [r7, #12]
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3710      	adds	r7, #16
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}

08002f04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f0e:	2300      	movs	r3, #0
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	e014      	b.n	8002f3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002f14:	4a0f      	ldr	r2, [pc, #60]	; (8002f54 <vQueueAddToRegistry+0x50>)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002f20:	490c      	ldr	r1, [pc, #48]	; (8002f54 <vQueueAddToRegistry+0x50>)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <vQueueAddToRegistry+0x50>)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4413      	add	r3, r2
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002f36:	e006      	b.n	8002f46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	3301      	adds	r3, #1
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2b07      	cmp	r3, #7
 8002f42:	d9e7      	bls.n	8002f14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	3714      	adds	r7, #20
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	20000744 	.word	0x20000744

08002f58 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002f68:	f001 fbb8 	bl	80046dc <vPortEnterCritical>
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d103      	bne.n	8002f82 <vQueueWaitForMessageRestricted+0x2a>
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d103      	bne.n	8002f98 <vQueueWaitForMessageRestricted+0x40>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f98:	f001 fbd4 	bl	8004744 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d106      	bne.n	8002fb2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	3324      	adds	r3, #36	; 0x24
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f000 fc51 	bl	8003854 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff ff26 	bl	8002e04 <prvUnlockQueue>
	}
 8002fb8:	bf00      	nop
 8002fba:	3718      	adds	r7, #24
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b08e      	sub	sp, #56	; 0x38
 8002fc4:	af04      	add	r7, sp, #16
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
 8002fcc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002fce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10c      	bne.n	8002fee <xTaskCreateStatic+0x2e>
	__asm volatile
 8002fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fd8:	b672      	cpsid	i
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	b662      	cpsie	i
 8002fe8:	623b      	str	r3, [r7, #32]
}
 8002fea:	bf00      	nop
 8002fec:	e7fe      	b.n	8002fec <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8002fee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d10c      	bne.n	800300e <xTaskCreateStatic+0x4e>
	__asm volatile
 8002ff4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff8:	b672      	cpsid	i
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	b662      	cpsie	i
 8003008:	61fb      	str	r3, [r7, #28]
}
 800300a:	bf00      	nop
 800300c:	e7fe      	b.n	800300c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800300e:	235c      	movs	r3, #92	; 0x5c
 8003010:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	2b5c      	cmp	r3, #92	; 0x5c
 8003016:	d00c      	beq.n	8003032 <xTaskCreateStatic+0x72>
	__asm volatile
 8003018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301c:	b672      	cpsid	i
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	b662      	cpsie	i
 800302c:	61bb      	str	r3, [r7, #24]
}
 800302e:	bf00      	nop
 8003030:	e7fe      	b.n	8003030 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003032:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d01e      	beq.n	8003078 <xTaskCreateStatic+0xb8>
 800303a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303c:	2b00      	cmp	r3, #0
 800303e:	d01b      	beq.n	8003078 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003042:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003048:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800304a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304c:	2202      	movs	r2, #2
 800304e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003052:	2300      	movs	r3, #0
 8003054:	9303      	str	r3, [sp, #12]
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	9302      	str	r3, [sp, #8]
 800305a:	f107 0314 	add.w	r3, r7, #20
 800305e:	9301      	str	r3, [sp, #4]
 8003060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003062:	9300      	str	r3, [sp, #0]
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	68b9      	ldr	r1, [r7, #8]
 800306a:	68f8      	ldr	r0, [r7, #12]
 800306c:	f000 f850 	bl	8003110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003070:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003072:	f000 f8df 	bl	8003234 <prvAddNewTaskToReadyList>
 8003076:	e001      	b.n	800307c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003078:	2300      	movs	r3, #0
 800307a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800307c:	697b      	ldr	r3, [r7, #20]
	}
 800307e:	4618      	mov	r0, r3
 8003080:	3728      	adds	r7, #40	; 0x28
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003086:	b580      	push	{r7, lr}
 8003088:	b08c      	sub	sp, #48	; 0x30
 800308a:	af04      	add	r7, sp, #16
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	603b      	str	r3, [r7, #0]
 8003092:	4613      	mov	r3, r2
 8003094:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003096:	88fb      	ldrh	r3, [r7, #6]
 8003098:	009b      	lsls	r3, r3, #2
 800309a:	4618      	mov	r0, r3
 800309c:	f001 fc4a 	bl	8004934 <pvPortMalloc>
 80030a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00e      	beq.n	80030c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80030a8:	205c      	movs	r0, #92	; 0x5c
 80030aa:	f001 fc43 	bl	8004934 <pvPortMalloc>
 80030ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	631a      	str	r2, [r3, #48]	; 0x30
 80030bc:	e005      	b.n	80030ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80030be:	6978      	ldr	r0, [r7, #20]
 80030c0:	f001 fd02 	bl	8004ac8 <vPortFree>
 80030c4:	e001      	b.n	80030ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80030c6:	2300      	movs	r3, #0
 80030c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d017      	beq.n	8003100 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2200      	movs	r2, #0
 80030d4:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80030d8:	88fa      	ldrh	r2, [r7, #6]
 80030da:	2300      	movs	r3, #0
 80030dc:	9303      	str	r3, [sp, #12]
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	9302      	str	r3, [sp, #8]
 80030e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030e4:	9301      	str	r3, [sp, #4]
 80030e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	68b9      	ldr	r1, [r7, #8]
 80030ee:	68f8      	ldr	r0, [r7, #12]
 80030f0:	f000 f80e 	bl	8003110 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80030f4:	69f8      	ldr	r0, [r7, #28]
 80030f6:	f000 f89d 	bl	8003234 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80030fa:	2301      	movs	r3, #1
 80030fc:	61bb      	str	r3, [r7, #24]
 80030fe:	e002      	b.n	8003106 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003100:	f04f 33ff 	mov.w	r3, #4294967295
 8003104:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003106:	69bb      	ldr	r3, [r7, #24]
	}
 8003108:	4618      	mov	r0, r3
 800310a:	3720      	adds	r7, #32
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800311e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003120:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	461a      	mov	r2, r3
 8003128:	21a5      	movs	r1, #165	; 0xa5
 800312a:	f001 fe19 	bl	8004d60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800312e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003130:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003138:	440b      	add	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	4413      	add	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	f023 0307 	bic.w	r3, r3, #7
 8003146:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8003152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003156:	b672      	cpsid	i
 8003158:	f383 8811 	msr	BASEPRI, r3
 800315c:	f3bf 8f6f 	isb	sy
 8003160:	f3bf 8f4f 	dsb	sy
 8003164:	b662      	cpsie	i
 8003166:	617b      	str	r3, [r7, #20]
}
 8003168:	bf00      	nop
 800316a:	e7fe      	b.n	800316a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d01f      	beq.n	80031b2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
 8003176:	e012      	b.n	800319e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	4413      	add	r3, r2
 800317e:	7819      	ldrb	r1, [r3, #0]
 8003180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	4413      	add	r3, r2
 8003186:	3334      	adds	r3, #52	; 0x34
 8003188:	460a      	mov	r2, r1
 800318a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800318c:	68ba      	ldr	r2, [r7, #8]
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	4413      	add	r3, r2
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d006      	beq.n	80031a6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	3301      	adds	r3, #1
 800319c:	61fb      	str	r3, [r7, #28]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b0f      	cmp	r3, #15
 80031a2:	d9e9      	bls.n	8003178 <prvInitialiseNewTask+0x68>
 80031a4:	e000      	b.n	80031a8 <prvInitialiseNewTask+0x98>
			{
				break;
 80031a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b0:	e003      	b.n	80031ba <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031bc:	2b37      	cmp	r3, #55	; 0x37
 80031be:	d901      	bls.n	80031c4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80031c0:	2337      	movs	r3, #55	; 0x37
 80031c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80031ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80031ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80031d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d2:	2200      	movs	r2, #0
 80031d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	3304      	adds	r3, #4
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff f952 	bl	8002484 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	3318      	adds	r3, #24
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff f94d 	bl	8002484 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80031f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80031fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003202:	2200      	movs	r2, #0
 8003204:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800320e:	683a      	ldr	r2, [r7, #0]
 8003210:	68f9      	ldr	r1, [r7, #12]
 8003212:	69b8      	ldr	r0, [r7, #24]
 8003214:	f001 f952 	bl	80044bc <pxPortInitialiseStack>
 8003218:	4602      	mov	r2, r0
 800321a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800321c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800321e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003228:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800322a:	bf00      	nop
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800323c:	f001 fa4e 	bl	80046dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003240:	4b2d      	ldr	r3, [pc, #180]	; (80032f8 <prvAddNewTaskToReadyList+0xc4>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3301      	adds	r3, #1
 8003246:	4a2c      	ldr	r2, [pc, #176]	; (80032f8 <prvAddNewTaskToReadyList+0xc4>)
 8003248:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800324a:	4b2c      	ldr	r3, [pc, #176]	; (80032fc <prvAddNewTaskToReadyList+0xc8>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003252:	4a2a      	ldr	r2, [pc, #168]	; (80032fc <prvAddNewTaskToReadyList+0xc8>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003258:	4b27      	ldr	r3, [pc, #156]	; (80032f8 <prvAddNewTaskToReadyList+0xc4>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d110      	bne.n	8003282 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003260:	f000 fc2c 	bl	8003abc <prvInitialiseTaskLists>
 8003264:	e00d      	b.n	8003282 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003266:	4b26      	ldr	r3, [pc, #152]	; (8003300 <prvAddNewTaskToReadyList+0xcc>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <prvAddNewTaskToReadyList+0xc8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003278:	429a      	cmp	r2, r3
 800327a:	d802      	bhi.n	8003282 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <prvAddNewTaskToReadyList+0xc8>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <prvAddNewTaskToReadyList+0xd0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a1e      	ldr	r2, [pc, #120]	; (8003304 <prvAddNewTaskToReadyList+0xd0>)
 800328a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800328c:	4b1d      	ldr	r3, [pc, #116]	; (8003304 <prvAddNewTaskToReadyList+0xd0>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003298:	4b1b      	ldr	r3, [pc, #108]	; (8003308 <prvAddNewTaskToReadyList+0xd4>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	429a      	cmp	r2, r3
 800329e:	d903      	bls.n	80032a8 <prvAddNewTaskToReadyList+0x74>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032a4:	4a18      	ldr	r2, [pc, #96]	; (8003308 <prvAddNewTaskToReadyList+0xd4>)
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	4a15      	ldr	r2, [pc, #84]	; (800330c <prvAddNewTaskToReadyList+0xd8>)
 80032b6:	441a      	add	r2, r3
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	3304      	adds	r3, #4
 80032bc:	4619      	mov	r1, r3
 80032be:	4610      	mov	r0, r2
 80032c0:	f7ff f8ed 	bl	800249e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80032c4:	f001 fa3e 	bl	8004744 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80032c8:	4b0d      	ldr	r3, [pc, #52]	; (8003300 <prvAddNewTaskToReadyList+0xcc>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00e      	beq.n	80032ee <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80032d0:	4b0a      	ldr	r3, [pc, #40]	; (80032fc <prvAddNewTaskToReadyList+0xc8>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032da:	429a      	cmp	r2, r3
 80032dc:	d207      	bcs.n	80032ee <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80032de:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <prvAddNewTaskToReadyList+0xdc>)
 80032e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032e4:	601a      	str	r2, [r3, #0]
 80032e6:	f3bf 8f4f 	dsb	sy
 80032ea:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
 80032f6:	bf00      	nop
 80032f8:	20000c58 	.word	0x20000c58
 80032fc:	20000784 	.word	0x20000784
 8003300:	20000c64 	.word	0x20000c64
 8003304:	20000c74 	.word	0x20000c74
 8003308:	20000c60 	.word	0x20000c60
 800330c:	20000788 	.word	0x20000788
 8003310:	e000ed04 	.word	0xe000ed04

08003314 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800331c:	2300      	movs	r3, #0
 800331e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d019      	beq.n	800335a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003326:	4b14      	ldr	r3, [pc, #80]	; (8003378 <vTaskDelay+0x64>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d00c      	beq.n	8003348 <vTaskDelay+0x34>
	__asm volatile
 800332e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003332:	b672      	cpsid	i
 8003334:	f383 8811 	msr	BASEPRI, r3
 8003338:	f3bf 8f6f 	isb	sy
 800333c:	f3bf 8f4f 	dsb	sy
 8003340:	b662      	cpsie	i
 8003342:	60bb      	str	r3, [r7, #8]
}
 8003344:	bf00      	nop
 8003346:	e7fe      	b.n	8003346 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003348:	f000 f884 	bl	8003454 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800334c:	2100      	movs	r1, #0
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 fd04 	bl	8003d5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003354:	f000 f88c 	bl	8003470 <xTaskResumeAll>
 8003358:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d107      	bne.n	8003370 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003360:	4b06      	ldr	r3, [pc, #24]	; (800337c <vTaskDelay+0x68>)
 8003362:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003366:	601a      	str	r2, [r3, #0]
 8003368:	f3bf 8f4f 	dsb	sy
 800336c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000c80 	.word	0x20000c80
 800337c:	e000ed04 	.word	0xe000ed04

08003380 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b08a      	sub	sp, #40	; 0x28
 8003384:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800338a:	2300      	movs	r3, #0
 800338c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800338e:	463a      	mov	r2, r7
 8003390:	1d39      	adds	r1, r7, #4
 8003392:	f107 0308 	add.w	r3, r7, #8
 8003396:	4618      	mov	r0, r3
 8003398:	f7ff f820 	bl	80023dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800339c:	6839      	ldr	r1, [r7, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	9202      	str	r2, [sp, #8]
 80033a4:	9301      	str	r3, [sp, #4]
 80033a6:	2300      	movs	r3, #0
 80033a8:	9300      	str	r3, [sp, #0]
 80033aa:	2300      	movs	r3, #0
 80033ac:	460a      	mov	r2, r1
 80033ae:	4923      	ldr	r1, [pc, #140]	; (800343c <vTaskStartScheduler+0xbc>)
 80033b0:	4823      	ldr	r0, [pc, #140]	; (8003440 <vTaskStartScheduler+0xc0>)
 80033b2:	f7ff fe05 	bl	8002fc0 <xTaskCreateStatic>
 80033b6:	4603      	mov	r3, r0
 80033b8:	4a22      	ldr	r2, [pc, #136]	; (8003444 <vTaskStartScheduler+0xc4>)
 80033ba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80033bc:	4b21      	ldr	r3, [pc, #132]	; (8003444 <vTaskStartScheduler+0xc4>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80033c4:	2301      	movs	r3, #1
 80033c6:	617b      	str	r3, [r7, #20]
 80033c8:	e001      	b.n	80033ce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80033ca:	2300      	movs	r3, #0
 80033cc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d102      	bne.n	80033da <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80033d4:	f000 fd16 	bl	8003e04 <xTimerCreateTimerTask>
 80033d8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d118      	bne.n	8003412 <vTaskStartScheduler+0x92>
	__asm volatile
 80033e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e4:	b672      	cpsid	i
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	b662      	cpsie	i
 80033f4:	613b      	str	r3, [r7, #16]
}
 80033f6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <vTaskStartScheduler+0xc8>)
 80033fa:	f04f 32ff 	mov.w	r2, #4294967295
 80033fe:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003400:	4b12      	ldr	r3, [pc, #72]	; (800344c <vTaskStartScheduler+0xcc>)
 8003402:	2201      	movs	r2, #1
 8003404:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003406:	4b12      	ldr	r3, [pc, #72]	; (8003450 <vTaskStartScheduler+0xd0>)
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800340c:	f001 f8e8 	bl	80045e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003410:	e010      	b.n	8003434 <vTaskStartScheduler+0xb4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d10c      	bne.n	8003434 <vTaskStartScheduler+0xb4>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	b672      	cpsid	i
 8003420:	f383 8811 	msr	BASEPRI, r3
 8003424:	f3bf 8f6f 	isb	sy
 8003428:	f3bf 8f4f 	dsb	sy
 800342c:	b662      	cpsie	i
 800342e:	60fb      	str	r3, [r7, #12]
}
 8003430:	bf00      	nop
 8003432:	e7fe      	b.n	8003432 <vTaskStartScheduler+0xb2>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}
 800343c:	08004da0 	.word	0x08004da0
 8003440:	08003a8d 	.word	0x08003a8d
 8003444:	20000c7c 	.word	0x20000c7c
 8003448:	20000c78 	.word	0x20000c78
 800344c:	20000c64 	.word	0x20000c64
 8003450:	20000c5c 	.word	0x20000c5c

08003454 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003454:	b480      	push	{r7}
 8003456:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003458:	4b04      	ldr	r3, [pc, #16]	; (800346c <vTaskSuspendAll+0x18>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	3301      	adds	r3, #1
 800345e:	4a03      	ldr	r2, [pc, #12]	; (800346c <vTaskSuspendAll+0x18>)
 8003460:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003462:	bf00      	nop
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	20000c80 	.word	0x20000c80

08003470 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003476:	2300      	movs	r3, #0
 8003478:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800347e:	4b43      	ldr	r3, [pc, #268]	; (800358c <xTaskResumeAll+0x11c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d10c      	bne.n	80034a0 <xTaskResumeAll+0x30>
	__asm volatile
 8003486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348a:	b672      	cpsid	i
 800348c:	f383 8811 	msr	BASEPRI, r3
 8003490:	f3bf 8f6f 	isb	sy
 8003494:	f3bf 8f4f 	dsb	sy
 8003498:	b662      	cpsie	i
 800349a:	603b      	str	r3, [r7, #0]
}
 800349c:	bf00      	nop
 800349e:	e7fe      	b.n	800349e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034a0:	f001 f91c 	bl	80046dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <xTaskResumeAll+0x11c>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3b01      	subs	r3, #1
 80034aa:	4a38      	ldr	r2, [pc, #224]	; (800358c <xTaskResumeAll+0x11c>)
 80034ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ae:	4b37      	ldr	r3, [pc, #220]	; (800358c <xTaskResumeAll+0x11c>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d162      	bne.n	800357c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034b6:	4b36      	ldr	r3, [pc, #216]	; (8003590 <xTaskResumeAll+0x120>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d05e      	beq.n	800357c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034be:	e02f      	b.n	8003520 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034c0:	4b34      	ldr	r3, [pc, #208]	; (8003594 <xTaskResumeAll+0x124>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	68db      	ldr	r3, [r3, #12]
 80034c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	3318      	adds	r3, #24
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f843 	bl	8002558 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7ff f83e 	bl	8002558 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e0:	4b2d      	ldr	r3, [pc, #180]	; (8003598 <xTaskResumeAll+0x128>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d903      	bls.n	80034f0 <xTaskResumeAll+0x80>
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ec:	4a2a      	ldr	r2, [pc, #168]	; (8003598 <xTaskResumeAll+0x128>)
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	4613      	mov	r3, r2
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	4413      	add	r3, r2
 80034fa:	009b      	lsls	r3, r3, #2
 80034fc:	4a27      	ldr	r2, [pc, #156]	; (800359c <xTaskResumeAll+0x12c>)
 80034fe:	441a      	add	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	3304      	adds	r3, #4
 8003504:	4619      	mov	r1, r3
 8003506:	4610      	mov	r0, r2
 8003508:	f7fe ffc9 	bl	800249e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003510:	4b23      	ldr	r3, [pc, #140]	; (80035a0 <xTaskResumeAll+0x130>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003516:	429a      	cmp	r2, r3
 8003518:	d302      	bcc.n	8003520 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800351a:	4b22      	ldr	r3, [pc, #136]	; (80035a4 <xTaskResumeAll+0x134>)
 800351c:	2201      	movs	r2, #1
 800351e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003520:	4b1c      	ldr	r3, [pc, #112]	; (8003594 <xTaskResumeAll+0x124>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d1cb      	bne.n	80034c0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800352e:	f000 fb65 	bl	8003bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003532:	4b1d      	ldr	r3, [pc, #116]	; (80035a8 <xTaskResumeAll+0x138>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d010      	beq.n	8003560 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800353e:	f000 f847 	bl	80035d0 <xTaskIncrementTick>
 8003542:	4603      	mov	r3, r0
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8003548:	4b16      	ldr	r3, [pc, #88]	; (80035a4 <xTaskResumeAll+0x134>)
 800354a:	2201      	movs	r2, #1
 800354c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3b01      	subs	r3, #1
 8003552:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1f1      	bne.n	800353e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800355a:	4b13      	ldr	r3, [pc, #76]	; (80035a8 <xTaskResumeAll+0x138>)
 800355c:	2200      	movs	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003560:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <xTaskResumeAll+0x134>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d009      	beq.n	800357c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003568:	2301      	movs	r3, #1
 800356a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800356c:	4b0f      	ldr	r3, [pc, #60]	; (80035ac <xTaskResumeAll+0x13c>)
 800356e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003572:	601a      	str	r2, [r3, #0]
 8003574:	f3bf 8f4f 	dsb	sy
 8003578:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800357c:	f001 f8e2 	bl	8004744 <vPortExitCritical>

	return xAlreadyYielded;
 8003580:	68bb      	ldr	r3, [r7, #8]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3710      	adds	r7, #16
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	20000c80 	.word	0x20000c80
 8003590:	20000c58 	.word	0x20000c58
 8003594:	20000c18 	.word	0x20000c18
 8003598:	20000c60 	.word	0x20000c60
 800359c:	20000788 	.word	0x20000788
 80035a0:	20000784 	.word	0x20000784
 80035a4:	20000c6c 	.word	0x20000c6c
 80035a8:	20000c68 	.word	0x20000c68
 80035ac:	e000ed04 	.word	0xe000ed04

080035b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035b6:	4b05      	ldr	r3, [pc, #20]	; (80035cc <xTaskGetTickCount+0x1c>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80035bc:	687b      	ldr	r3, [r7, #4]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	370c      	adds	r7, #12
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20000c5c 	.word	0x20000c5c

080035d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80035d6:	2300      	movs	r3, #0
 80035d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80035da:	4b50      	ldr	r3, [pc, #320]	; (800371c <xTaskIncrementTick+0x14c>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 808b 	bne.w	80036fa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80035e4:	4b4e      	ldr	r3, [pc, #312]	; (8003720 <xTaskIncrementTick+0x150>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3301      	adds	r3, #1
 80035ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80035ec:	4a4c      	ldr	r2, [pc, #304]	; (8003720 <xTaskIncrementTick+0x150>)
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d122      	bne.n	800363e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80035f8:	4b4a      	ldr	r3, [pc, #296]	; (8003724 <xTaskIncrementTick+0x154>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00c      	beq.n	800361c <xTaskIncrementTick+0x4c>
	__asm volatile
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	b672      	cpsid	i
 8003608:	f383 8811 	msr	BASEPRI, r3
 800360c:	f3bf 8f6f 	isb	sy
 8003610:	f3bf 8f4f 	dsb	sy
 8003614:	b662      	cpsie	i
 8003616:	603b      	str	r3, [r7, #0]
}
 8003618:	bf00      	nop
 800361a:	e7fe      	b.n	800361a <xTaskIncrementTick+0x4a>
 800361c:	4b41      	ldr	r3, [pc, #260]	; (8003724 <xTaskIncrementTick+0x154>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	60fb      	str	r3, [r7, #12]
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <xTaskIncrementTick+0x158>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3f      	ldr	r2, [pc, #252]	; (8003724 <xTaskIncrementTick+0x154>)
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4a3f      	ldr	r2, [pc, #252]	; (8003728 <xTaskIncrementTick+0x158>)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6013      	str	r3, [r2, #0]
 8003630:	4b3e      	ldr	r3, [pc, #248]	; (800372c <xTaskIncrementTick+0x15c>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3301      	adds	r3, #1
 8003636:	4a3d      	ldr	r2, [pc, #244]	; (800372c <xTaskIncrementTick+0x15c>)
 8003638:	6013      	str	r3, [r2, #0]
 800363a:	f000 fadf 	bl	8003bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800363e:	4b3c      	ldr	r3, [pc, #240]	; (8003730 <xTaskIncrementTick+0x160>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	693a      	ldr	r2, [r7, #16]
 8003644:	429a      	cmp	r2, r3
 8003646:	d349      	bcc.n	80036dc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003648:	4b36      	ldr	r3, [pc, #216]	; (8003724 <xTaskIncrementTick+0x154>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003652:	4b37      	ldr	r3, [pc, #220]	; (8003730 <xTaskIncrementTick+0x160>)
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	601a      	str	r2, [r3, #0]
					break;
 800365a:	e03f      	b.n	80036dc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800365c:	4b31      	ldr	r3, [pc, #196]	; (8003724 <xTaskIncrementTick+0x154>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	429a      	cmp	r2, r3
 8003672:	d203      	bcs.n	800367c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003674:	4a2e      	ldr	r2, [pc, #184]	; (8003730 <xTaskIncrementTick+0x160>)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800367a:	e02f      	b.n	80036dc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3304      	adds	r3, #4
 8003680:	4618      	mov	r0, r3
 8003682:	f7fe ff69 	bl	8002558 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	2b00      	cmp	r3, #0
 800368c:	d004      	beq.n	8003698 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	3318      	adds	r3, #24
 8003692:	4618      	mov	r0, r3
 8003694:	f7fe ff60 	bl	8002558 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800369c:	4b25      	ldr	r3, [pc, #148]	; (8003734 <xTaskIncrementTick+0x164>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	429a      	cmp	r2, r3
 80036a2:	d903      	bls.n	80036ac <xTaskIncrementTick+0xdc>
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a22      	ldr	r2, [pc, #136]	; (8003734 <xTaskIncrementTick+0x164>)
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	4a1f      	ldr	r2, [pc, #124]	; (8003738 <xTaskIncrementTick+0x168>)
 80036ba:	441a      	add	r2, r3
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3304      	adds	r3, #4
 80036c0:	4619      	mov	r1, r3
 80036c2:	4610      	mov	r0, r2
 80036c4:	f7fe feeb 	bl	800249e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036cc:	4b1b      	ldr	r3, [pc, #108]	; (800373c <xTaskIncrementTick+0x16c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d3b8      	bcc.n	8003648 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80036d6:	2301      	movs	r3, #1
 80036d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036da:	e7b5      	b.n	8003648 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <xTaskIncrementTick+0x16c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036e2:	4915      	ldr	r1, [pc, #84]	; (8003738 <xTaskIncrementTick+0x168>)
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	440b      	add	r3, r1
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d907      	bls.n	8003704 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80036f4:	2301      	movs	r3, #1
 80036f6:	617b      	str	r3, [r7, #20]
 80036f8:	e004      	b.n	8003704 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80036fa:	4b11      	ldr	r3, [pc, #68]	; (8003740 <xTaskIncrementTick+0x170>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3301      	adds	r3, #1
 8003700:	4a0f      	ldr	r2, [pc, #60]	; (8003740 <xTaskIncrementTick+0x170>)
 8003702:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <xTaskIncrementTick+0x174>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d001      	beq.n	8003710 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003710:	697b      	ldr	r3, [r7, #20]
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	20000c80 	.word	0x20000c80
 8003720:	20000c5c 	.word	0x20000c5c
 8003724:	20000c10 	.word	0x20000c10
 8003728:	20000c14 	.word	0x20000c14
 800372c:	20000c70 	.word	0x20000c70
 8003730:	20000c78 	.word	0x20000c78
 8003734:	20000c60 	.word	0x20000c60
 8003738:	20000788 	.word	0x20000788
 800373c:	20000784 	.word	0x20000784
 8003740:	20000c68 	.word	0x20000c68
 8003744:	20000c6c 	.word	0x20000c6c

08003748 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003748:	b480      	push	{r7}
 800374a:	b085      	sub	sp, #20
 800374c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800374e:	4b29      	ldr	r3, [pc, #164]	; (80037f4 <vTaskSwitchContext+0xac>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003756:	4b28      	ldr	r3, [pc, #160]	; (80037f8 <vTaskSwitchContext+0xb0>)
 8003758:	2201      	movs	r2, #1
 800375a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800375c:	e043      	b.n	80037e6 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
 800375e:	4b26      	ldr	r3, [pc, #152]	; (80037f8 <vTaskSwitchContext+0xb0>)
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003764:	4b25      	ldr	r3, [pc, #148]	; (80037fc <vTaskSwitchContext+0xb4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60fb      	str	r3, [r7, #12]
 800376a:	e012      	b.n	8003792 <vTaskSwitchContext+0x4a>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10c      	bne.n	800378c <vTaskSwitchContext+0x44>
	__asm volatile
 8003772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003776:	b672      	cpsid	i
 8003778:	f383 8811 	msr	BASEPRI, r3
 800377c:	f3bf 8f6f 	isb	sy
 8003780:	f3bf 8f4f 	dsb	sy
 8003784:	b662      	cpsie	i
 8003786:	607b      	str	r3, [r7, #4]
}
 8003788:	bf00      	nop
 800378a:	e7fe      	b.n	800378a <vTaskSwitchContext+0x42>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	3b01      	subs	r3, #1
 8003790:	60fb      	str	r3, [r7, #12]
 8003792:	491b      	ldr	r1, [pc, #108]	; (8003800 <vTaskSwitchContext+0xb8>)
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	4613      	mov	r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	4413      	add	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0e2      	beq.n	800376c <vTaskSwitchContext+0x24>
 80037a6:	68fa      	ldr	r2, [r7, #12]
 80037a8:	4613      	mov	r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	4413      	add	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4a13      	ldr	r2, [pc, #76]	; (8003800 <vTaskSwitchContext+0xb8>)
 80037b2:	4413      	add	r3, r2
 80037b4:	60bb      	str	r3, [r7, #8]
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	685a      	ldr	r2, [r3, #4]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3308      	adds	r3, #8
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d104      	bne.n	80037d6 <vTaskSwitchContext+0x8e>
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	68db      	ldr	r3, [r3, #12]
 80037dc:	4a09      	ldr	r2, [pc, #36]	; (8003804 <vTaskSwitchContext+0xbc>)
 80037de:	6013      	str	r3, [r2, #0]
 80037e0:	4a06      	ldr	r2, [pc, #24]	; (80037fc <vTaskSwitchContext+0xb4>)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6013      	str	r3, [r2, #0]
}
 80037e6:	bf00      	nop
 80037e8:	3714      	adds	r7, #20
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000c80 	.word	0x20000c80
 80037f8:	20000c6c 	.word	0x20000c6c
 80037fc:	20000c60 	.word	0x20000c60
 8003800:	20000788 	.word	0x20000788
 8003804:	20000784 	.word	0x20000784

08003808 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b084      	sub	sp, #16
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d10c      	bne.n	8003832 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8003818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381c:	b672      	cpsid	i
 800381e:	f383 8811 	msr	BASEPRI, r3
 8003822:	f3bf 8f6f 	isb	sy
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	b662      	cpsie	i
 800382c:	60fb      	str	r3, [r7, #12]
}
 800382e:	bf00      	nop
 8003830:	e7fe      	b.n	8003830 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003832:	4b07      	ldr	r3, [pc, #28]	; (8003850 <vTaskPlaceOnEventList+0x48>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3318      	adds	r3, #24
 8003838:	4619      	mov	r1, r3
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	f7fe fe53 	bl	80024e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003840:	2101      	movs	r1, #1
 8003842:	6838      	ldr	r0, [r7, #0]
 8003844:	f000 fa8a 	bl	8003d5c <prvAddCurrentTaskToDelayedList>
}
 8003848:	bf00      	nop
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	20000784 	.word	0x20000784

08003854 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af00      	add	r7, sp, #0
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d10c      	bne.n	8003880 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8003866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386a:	b672      	cpsid	i
 800386c:	f383 8811 	msr	BASEPRI, r3
 8003870:	f3bf 8f6f 	isb	sy
 8003874:	f3bf 8f4f 	dsb	sy
 8003878:	b662      	cpsie	i
 800387a:	617b      	str	r3, [r7, #20]
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003880:	4b0a      	ldr	r3, [pc, #40]	; (80038ac <vTaskPlaceOnEventListRestricted+0x58>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3318      	adds	r3, #24
 8003886:	4619      	mov	r1, r3
 8003888:	68f8      	ldr	r0, [r7, #12]
 800388a:	f7fe fe08 	bl	800249e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8003894:	f04f 33ff 	mov.w	r3, #4294967295
 8003898:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68b8      	ldr	r0, [r7, #8]
 800389e:	f000 fa5d 	bl	8003d5c <prvAddCurrentTaskToDelayedList>
	}
 80038a2:	bf00      	nop
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000784 	.word	0x20000784

080038b0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b086      	sub	sp, #24
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	68db      	ldr	r3, [r3, #12]
 80038be:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10c      	bne.n	80038e0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80038c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ca:	b672      	cpsid	i
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	b662      	cpsie	i
 80038da:	60fb      	str	r3, [r7, #12]
}
 80038dc:	bf00      	nop
 80038de:	e7fe      	b.n	80038de <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	3318      	adds	r3, #24
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fe fe37 	bl	8002558 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038ea:	4b1e      	ldr	r3, [pc, #120]	; (8003964 <xTaskRemoveFromEventList+0xb4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	3304      	adds	r3, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f7fe fe2e 	bl	8002558 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <xTaskRemoveFromEventList+0xb8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	429a      	cmp	r2, r3
 8003906:	d903      	bls.n	8003910 <xTaskRemoveFromEventList+0x60>
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390c:	4a16      	ldr	r2, [pc, #88]	; (8003968 <xTaskRemoveFromEventList+0xb8>)
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	4a13      	ldr	r2, [pc, #76]	; (800396c <xTaskRemoveFromEventList+0xbc>)
 800391e:	441a      	add	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f7fe fdb9 	bl	800249e <vListInsertEnd>
 800392c:	e005      	b.n	800393a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3318      	adds	r3, #24
 8003932:	4619      	mov	r1, r3
 8003934:	480e      	ldr	r0, [pc, #56]	; (8003970 <xTaskRemoveFromEventList+0xc0>)
 8003936:	f7fe fdb2 	bl	800249e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <xTaskRemoveFromEventList+0xc4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	429a      	cmp	r2, r3
 8003946:	d905      	bls.n	8003954 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800394c:	4b0a      	ldr	r3, [pc, #40]	; (8003978 <xTaskRemoveFromEventList+0xc8>)
 800394e:	2201      	movs	r2, #1
 8003950:	601a      	str	r2, [r3, #0]
 8003952:	e001      	b.n	8003958 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8003954:	2300      	movs	r3, #0
 8003956:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003958:	697b      	ldr	r3, [r7, #20]
}
 800395a:	4618      	mov	r0, r3
 800395c:	3718      	adds	r7, #24
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
 8003962:	bf00      	nop
 8003964:	20000c80 	.word	0x20000c80
 8003968:	20000c60 	.word	0x20000c60
 800396c:	20000788 	.word	0x20000788
 8003970:	20000c18 	.word	0x20000c18
 8003974:	20000784 	.word	0x20000784
 8003978:	20000c6c 	.word	0x20000c6c

0800397c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800397c:	b480      	push	{r7}
 800397e:	b083      	sub	sp, #12
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003984:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <vTaskInternalSetTimeOutState+0x24>)
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800398c:	4b05      	ldr	r3, [pc, #20]	; (80039a4 <vTaskInternalSetTimeOutState+0x28>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	605a      	str	r2, [r3, #4]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	20000c70 	.word	0x20000c70
 80039a4:	20000c5c 	.word	0x20000c5c

080039a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b088      	sub	sp, #32
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d10c      	bne.n	80039d2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80039b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039bc:	b672      	cpsid	i
 80039be:	f383 8811 	msr	BASEPRI, r3
 80039c2:	f3bf 8f6f 	isb	sy
 80039c6:	f3bf 8f4f 	dsb	sy
 80039ca:	b662      	cpsie	i
 80039cc:	613b      	str	r3, [r7, #16]
}
 80039ce:	bf00      	nop
 80039d0:	e7fe      	b.n	80039d0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d10c      	bne.n	80039f2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80039d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039dc:	b672      	cpsid	i
 80039de:	f383 8811 	msr	BASEPRI, r3
 80039e2:	f3bf 8f6f 	isb	sy
 80039e6:	f3bf 8f4f 	dsb	sy
 80039ea:	b662      	cpsie	i
 80039ec:	60fb      	str	r3, [r7, #12]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80039f2:	f000 fe73 	bl	80046dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <xTaskCheckForTimeOut+0xc4>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d102      	bne.n	8003a16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
 8003a14:	e023      	b.n	8003a5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4b15      	ldr	r3, [pc, #84]	; (8003a70 <xTaskCheckForTimeOut+0xc8>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d007      	beq.n	8003a32 <xTaskCheckForTimeOut+0x8a>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d302      	bcc.n	8003a32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
 8003a30:	e015      	b.n	8003a5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	697a      	ldr	r2, [r7, #20]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d20b      	bcs.n	8003a54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	1ad2      	subs	r2, r2, r3
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f7ff ff97 	bl	800397c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	e004      	b.n	8003a5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a5e:	f000 fe71 	bl	8004744 <vPortExitCritical>

	return xReturn;
 8003a62:	69fb      	ldr	r3, [r7, #28]
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3720      	adds	r7, #32
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	20000c5c 	.word	0x20000c5c
 8003a70:	20000c70 	.word	0x20000c70

08003a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a78:	4b03      	ldr	r3, [pc, #12]	; (8003a88 <vTaskMissedYield+0x14>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr
 8003a88:	20000c6c 	.word	0x20000c6c

08003a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003a94:	f000 f852 	bl	8003b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003a98:	4b06      	ldr	r3, [pc, #24]	; (8003ab4 <prvIdleTask+0x28>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d9f9      	bls.n	8003a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003aa0:	4b05      	ldr	r3, [pc, #20]	; (8003ab8 <prvIdleTask+0x2c>)
 8003aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	f3bf 8f4f 	dsb	sy
 8003aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ab0:	e7f0      	b.n	8003a94 <prvIdleTask+0x8>
 8003ab2:	bf00      	nop
 8003ab4:	20000788 	.word	0x20000788
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	e00c      	b.n	8003ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	4a12      	ldr	r2, [pc, #72]	; (8003b1c <prvInitialiseTaskLists+0x60>)
 8003ad4:	4413      	add	r3, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fcb4 	bl	8002444 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	607b      	str	r3, [r7, #4]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b37      	cmp	r3, #55	; 0x37
 8003ae6:	d9ef      	bls.n	8003ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003ae8:	480d      	ldr	r0, [pc, #52]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003aea:	f7fe fcab 	bl	8002444 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003af0:	f7fe fca8 	bl	8002444 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003af4:	480c      	ldr	r0, [pc, #48]	; (8003b28 <prvInitialiseTaskLists+0x6c>)
 8003af6:	f7fe fca5 	bl	8002444 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003afa:	480c      	ldr	r0, [pc, #48]	; (8003b2c <prvInitialiseTaskLists+0x70>)
 8003afc:	f7fe fca2 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b00:	480b      	ldr	r0, [pc, #44]	; (8003b30 <prvInitialiseTaskLists+0x74>)
 8003b02:	f7fe fc9f 	bl	8002444 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b06:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <prvInitialiseTaskLists+0x78>)
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <prvInitialiseTaskLists+0x64>)
 8003b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b0c:	4b0a      	ldr	r3, [pc, #40]	; (8003b38 <prvInitialiseTaskLists+0x7c>)
 8003b0e:	4a05      	ldr	r2, [pc, #20]	; (8003b24 <prvInitialiseTaskLists+0x68>)
 8003b10:	601a      	str	r2, [r3, #0]
}
 8003b12:	bf00      	nop
 8003b14:	3708      	adds	r7, #8
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000788 	.word	0x20000788
 8003b20:	20000be8 	.word	0x20000be8
 8003b24:	20000bfc 	.word	0x20000bfc
 8003b28:	20000c18 	.word	0x20000c18
 8003b2c:	20000c2c 	.word	0x20000c2c
 8003b30:	20000c44 	.word	0x20000c44
 8003b34:	20000c10 	.word	0x20000c10
 8003b38:	20000c14 	.word	0x20000c14

08003b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b42:	e019      	b.n	8003b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b44:	f000 fdca 	bl	80046dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b48:	4b10      	ldr	r3, [pc, #64]	; (8003b8c <prvCheckTasksWaitingTermination+0x50>)
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	3304      	adds	r3, #4
 8003b54:	4618      	mov	r0, r3
 8003b56:	f7fe fcff 	bl	8002558 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b5a:	4b0d      	ldr	r3, [pc, #52]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	4a0b      	ldr	r2, [pc, #44]	; (8003b90 <prvCheckTasksWaitingTermination+0x54>)
 8003b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b64:	4b0b      	ldr	r3, [pc, #44]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	4a0a      	ldr	r2, [pc, #40]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b6e:	f000 fde9 	bl	8004744 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 f810 	bl	8003b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b78:	4b06      	ldr	r3, [pc, #24]	; (8003b94 <prvCheckTasksWaitingTermination+0x58>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1e1      	bne.n	8003b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b80:	bf00      	nop
 8003b82:	bf00      	nop
 8003b84:	3708      	adds	r7, #8
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	20000c2c 	.word	0x20000c2c
 8003b90:	20000c58 	.word	0x20000c58
 8003b94:	20000c40 	.word	0x20000c40

08003b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d108      	bne.n	8003bbc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f000 ff8a 	bl	8004ac8 <vPortFree>
				vPortFree( pxTCB );
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 ff87 	bl	8004ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bba:	e01a      	b.n	8003bf2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d103      	bne.n	8003bce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 ff7e 	bl	8004ac8 <vPortFree>
	}
 8003bcc:	e011      	b.n	8003bf2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d00c      	beq.n	8003bf2 <prvDeleteTCB+0x5a>
	__asm volatile
 8003bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bdc:	b672      	cpsid	i
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	b662      	cpsie	i
 8003bec:	60fb      	str	r3, [r7, #12]
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <prvDeleteTCB+0x58>
	}
 8003bf2:	bf00      	nop
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <prvResetNextTaskUnblockTime+0x38>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d104      	bne.n	8003c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003c0c:	4b0a      	ldr	r3, [pc, #40]	; (8003c38 <prvResetNextTaskUnblockTime+0x3c>)
 8003c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8003c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003c14:	e008      	b.n	8003c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c16:	4b07      	ldr	r3, [pc, #28]	; (8003c34 <prvResetNextTaskUnblockTime+0x38>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	4a04      	ldr	r2, [pc, #16]	; (8003c38 <prvResetNextTaskUnblockTime+0x3c>)
 8003c26:	6013      	str	r3, [r2, #0]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	20000c10 	.word	0x20000c10
 8003c38:	20000c78 	.word	0x20000c78

08003c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c42:	4b0b      	ldr	r3, [pc, #44]	; (8003c70 <xTaskGetSchedulerState+0x34>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d102      	bne.n	8003c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	607b      	str	r3, [r7, #4]
 8003c4e:	e008      	b.n	8003c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c50:	4b08      	ldr	r3, [pc, #32]	; (8003c74 <xTaskGetSchedulerState+0x38>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d102      	bne.n	8003c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c58:	2302      	movs	r3, #2
 8003c5a:	607b      	str	r3, [r7, #4]
 8003c5c:	e001      	b.n	8003c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c62:	687b      	ldr	r3, [r7, #4]
	}
 8003c64:	4618      	mov	r0, r3
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	20000c64 	.word	0x20000c64
 8003c74:	20000c80 	.word	0x20000c80

08003c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d05a      	beq.n	8003d44 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c8e:	4b30      	ldr	r3, [pc, #192]	; (8003d50 <xTaskPriorityDisinherit+0xd8>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	429a      	cmp	r2, r3
 8003c96:	d00c      	beq.n	8003cb2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8003c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9c:	b672      	cpsid	i
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	b662      	cpsie	i
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d10c      	bne.n	8003cd4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8003cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbe:	b672      	cpsid	i
 8003cc0:	f383 8811 	msr	BASEPRI, r3
 8003cc4:	f3bf 8f6f 	isb	sy
 8003cc8:	f3bf 8f4f 	dsb	sy
 8003ccc:	b662      	cpsie	i
 8003cce:	60bb      	str	r3, [r7, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd8:	1e5a      	subs	r2, r3, #1
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d02c      	beq.n	8003d44 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d128      	bne.n	8003d44 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fc2e 	bl	8002558 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <xTaskPriorityDisinherit+0xdc>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d903      	bls.n	8003d24 <xTaskPriorityDisinherit+0xac>
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	4a0c      	ldr	r2, [pc, #48]	; (8003d54 <xTaskPriorityDisinherit+0xdc>)
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d28:	4613      	mov	r3, r2
 8003d2a:	009b      	lsls	r3, r3, #2
 8003d2c:	4413      	add	r3, r2
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	4a09      	ldr	r2, [pc, #36]	; (8003d58 <xTaskPriorityDisinherit+0xe0>)
 8003d32:	441a      	add	r2, r3
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	3304      	adds	r3, #4
 8003d38:	4619      	mov	r1, r3
 8003d3a:	4610      	mov	r0, r2
 8003d3c:	f7fe fbaf 	bl	800249e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d40:	2301      	movs	r3, #1
 8003d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d44:	697b      	ldr	r3, [r7, #20]
	}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3718      	adds	r7, #24
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
 8003d4e:	bf00      	nop
 8003d50:	20000784 	.word	0x20000784
 8003d54:	20000c60 	.word	0x20000c60
 8003d58:	20000788 	.word	0x20000788

08003d5c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003d66:	4b21      	ldr	r3, [pc, #132]	; (8003dec <prvAddCurrentTaskToDelayedList+0x90>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d6c:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe fbf0 	bl	8002558 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d7e:	d10a      	bne.n	8003d96 <prvAddCurrentTaskToDelayedList+0x3a>
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d007      	beq.n	8003d96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d86:	4b1a      	ldr	r3, [pc, #104]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3304      	adds	r3, #4
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	4819      	ldr	r0, [pc, #100]	; (8003df4 <prvAddCurrentTaskToDelayedList+0x98>)
 8003d90:	f7fe fb85 	bl	800249e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003d94:	e026      	b.n	8003de4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003d96:	68fa      	ldr	r2, [r7, #12]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4413      	add	r3, r2
 8003d9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68ba      	ldr	r2, [r7, #8]
 8003da4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003da6:	68ba      	ldr	r2, [r7, #8]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	429a      	cmp	r2, r3
 8003dac:	d209      	bcs.n	8003dc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	4b0f      	ldr	r3, [pc, #60]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	3304      	adds	r3, #4
 8003db8:	4619      	mov	r1, r3
 8003dba:	4610      	mov	r0, r2
 8003dbc:	f7fe fb93 	bl	80024e6 <vListInsert>
}
 8003dc0:	e010      	b.n	8003de4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003dc2:	4b0e      	ldr	r3, [pc, #56]	; (8003dfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <prvAddCurrentTaskToDelayedList+0x94>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	3304      	adds	r3, #4
 8003dcc:	4619      	mov	r1, r3
 8003dce:	4610      	mov	r0, r2
 8003dd0:	f7fe fb89 	bl	80024e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d202      	bcs.n	8003de4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003dde:	4a08      	ldr	r2, [pc, #32]	; (8003e00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6013      	str	r3, [r2, #0]
}
 8003de4:	bf00      	nop
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}
 8003dec:	20000c5c 	.word	0x20000c5c
 8003df0:	20000784 	.word	0x20000784
 8003df4:	20000c44 	.word	0x20000c44
 8003df8:	20000c14 	.word	0x20000c14
 8003dfc:	20000c10 	.word	0x20000c10
 8003e00:	20000c78 	.word	0x20000c78

08003e04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b08a      	sub	sp, #40	; 0x28
 8003e08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003e0e:	f000 fb15 	bl	800443c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003e12:	4b1d      	ldr	r3, [pc, #116]	; (8003e88 <xTimerCreateTimerTask+0x84>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d021      	beq.n	8003e5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003e22:	1d3a      	adds	r2, r7, #4
 8003e24:	f107 0108 	add.w	r1, r7, #8
 8003e28:	f107 030c 	add.w	r3, r7, #12
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe faef 	bl	8002410 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	9202      	str	r2, [sp, #8]
 8003e3a:	9301      	str	r3, [sp, #4]
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	9300      	str	r3, [sp, #0]
 8003e40:	2300      	movs	r3, #0
 8003e42:	460a      	mov	r2, r1
 8003e44:	4911      	ldr	r1, [pc, #68]	; (8003e8c <xTimerCreateTimerTask+0x88>)
 8003e46:	4812      	ldr	r0, [pc, #72]	; (8003e90 <xTimerCreateTimerTask+0x8c>)
 8003e48:	f7ff f8ba 	bl	8002fc0 <xTaskCreateStatic>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a11      	ldr	r2, [pc, #68]	; (8003e94 <xTimerCreateTimerTask+0x90>)
 8003e50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003e52:	4b10      	ldr	r3, [pc, #64]	; (8003e94 <xTimerCreateTimerTask+0x90>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d001      	beq.n	8003e5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10c      	bne.n	8003e7e <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	b672      	cpsid	i
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	b662      	cpsie	i
 8003e78:	613b      	str	r3, [r7, #16]
}
 8003e7a:	bf00      	nop
 8003e7c:	e7fe      	b.n	8003e7c <xTimerCreateTimerTask+0x78>
	return xReturn;
 8003e7e:	697b      	ldr	r3, [r7, #20]
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3718      	adds	r7, #24
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	20000cb4 	.word	0x20000cb4
 8003e8c:	08004da8 	.word	0x08004da8
 8003e90:	08003fd5 	.word	0x08003fd5
 8003e94:	20000cb8 	.word	0x20000cb8

08003e98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b08a      	sub	sp, #40	; 0x28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
 8003ea4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d10c      	bne.n	8003eca <xTimerGenericCommand+0x32>
	__asm volatile
 8003eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb4:	b672      	cpsid	i
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	b662      	cpsie	i
 8003ec4:	623b      	str	r3, [r7, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	e7fe      	b.n	8003ec8 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003eca:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <xTimerGenericCommand+0x9c>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d02a      	beq.n	8003f28 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	2b05      	cmp	r3, #5
 8003ee2:	dc18      	bgt.n	8003f16 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003ee4:	f7ff feaa 	bl	8003c3c <xTaskGetSchedulerState>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d109      	bne.n	8003f02 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003eee:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <xTimerGenericCommand+0x9c>)
 8003ef0:	6818      	ldr	r0, [r3, #0]
 8003ef2:	f107 0110 	add.w	r1, r7, #16
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003efa:	f7fe fc67 	bl	80027cc <xQueueGenericSend>
 8003efe:	6278      	str	r0, [r7, #36]	; 0x24
 8003f00:	e012      	b.n	8003f28 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <xTimerGenericCommand+0x9c>)
 8003f04:	6818      	ldr	r0, [r3, #0]
 8003f06:	f107 0110 	add.w	r1, r7, #16
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f7fe fc5d 	bl	80027cc <xQueueGenericSend>
 8003f12:	6278      	str	r0, [r7, #36]	; 0x24
 8003f14:	e008      	b.n	8003f28 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <xTimerGenericCommand+0x9c>)
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	f107 0110 	add.w	r1, r7, #16
 8003f1e:	2300      	movs	r3, #0
 8003f20:	683a      	ldr	r2, [r7, #0]
 8003f22:	f7fe fd59 	bl	80029d8 <xQueueGenericSendFromISR>
 8003f26:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3728      	adds	r7, #40	; 0x28
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	20000cb4 	.word	0x20000cb4

08003f38 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f42:	4b23      	ldr	r3, [pc, #140]	; (8003fd0 <prvProcessExpiredTimer+0x98>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	3304      	adds	r3, #4
 8003f50:	4618      	mov	r0, r3
 8003f52:	f7fe fb01 	bl	8002558 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003f5c:	f003 0304 	and.w	r3, r3, #4
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d024      	beq.n	8003fae <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	699a      	ldr	r2, [r3, #24]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	18d1      	adds	r1, r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	6978      	ldr	r0, [r7, #20]
 8003f72:	f000 f8d3 	bl	800411c <prvInsertTimerInActiveList>
 8003f76:	4603      	mov	r3, r0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d021      	beq.n	8003fc0 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	2300      	movs	r3, #0
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	2100      	movs	r1, #0
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff86 	bl	8003e98 <xTimerGenericCommand>
 8003f8c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d115      	bne.n	8003fc0 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8003f94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f98:	b672      	cpsid	i
 8003f9a:	f383 8811 	msr	BASEPRI, r3
 8003f9e:	f3bf 8f6f 	isb	sy
 8003fa2:	f3bf 8f4f 	dsb	sy
 8003fa6:	b662      	cpsie	i
 8003fa8:	60fb      	str	r3, [r7, #12]
}
 8003faa:	bf00      	nop
 8003fac:	e7fe      	b.n	8003fac <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003fb4:	f023 0301 	bic.w	r3, r3, #1
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	6978      	ldr	r0, [r7, #20]
 8003fc6:	4798      	blx	r3
}
 8003fc8:	bf00      	nop
 8003fca:	3718      	adds	r7, #24
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}
 8003fd0:	20000cac 	.word	0x20000cac

08003fd4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003fdc:	f107 0308 	add.w	r3, r7, #8
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f000 f857 	bl	8004094 <prvGetNextExpireTime>
 8003fe6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4619      	mov	r1, r3
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 f803 	bl	8003ff8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003ff2:	f000 f8d5 	bl	80041a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ff6:	e7f1      	b.n	8003fdc <prvTimerTask+0x8>

08003ff8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004002:	f7ff fa27 	bl	8003454 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004006:	f107 0308 	add.w	r3, r7, #8
 800400a:	4618      	mov	r0, r3
 800400c:	f000 f866 	bl	80040dc <prvSampleTimeNow>
 8004010:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d130      	bne.n	800407a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d10a      	bne.n	8004034 <prvProcessTimerOrBlockTask+0x3c>
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	429a      	cmp	r2, r3
 8004024:	d806      	bhi.n	8004034 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004026:	f7ff fa23 	bl	8003470 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800402a:	68f9      	ldr	r1, [r7, #12]
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f7ff ff83 	bl	8003f38 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004032:	e024      	b.n	800407e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d008      	beq.n	800404c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800403a:	4b13      	ldr	r3, [pc, #76]	; (8004088 <prvProcessTimerOrBlockTask+0x90>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <prvProcessTimerOrBlockTask+0x50>
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <prvProcessTimerOrBlockTask+0x52>
 8004048:	2300      	movs	r3, #0
 800404a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800404c:	4b0f      	ldr	r3, [pc, #60]	; (800408c <prvProcessTimerOrBlockTask+0x94>)
 800404e:	6818      	ldr	r0, [r3, #0]
 8004050:	687a      	ldr	r2, [r7, #4]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	1ad3      	subs	r3, r2, r3
 8004056:	683a      	ldr	r2, [r7, #0]
 8004058:	4619      	mov	r1, r3
 800405a:	f7fe ff7d 	bl	8002f58 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800405e:	f7ff fa07 	bl	8003470 <xTaskResumeAll>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d10a      	bne.n	800407e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004068:	4b09      	ldr	r3, [pc, #36]	; (8004090 <prvProcessTimerOrBlockTask+0x98>)
 800406a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800406e:	601a      	str	r2, [r3, #0]
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	f3bf 8f6f 	isb	sy
}
 8004078:	e001      	b.n	800407e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800407a:	f7ff f9f9 	bl	8003470 <xTaskResumeAll>
}
 800407e:	bf00      	nop
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	20000cb0 	.word	0x20000cb0
 800408c:	20000cb4 	.word	0x20000cb4
 8004090:	e000ed04 	.word	0xe000ed04

08004094 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004094:	b480      	push	{r7}
 8004096:	b085      	sub	sp, #20
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800409c:	4b0e      	ldr	r3, [pc, #56]	; (80040d8 <prvGetNextExpireTime+0x44>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <prvGetNextExpireTime+0x16>
 80040a6:	2201      	movs	r2, #1
 80040a8:	e000      	b.n	80040ac <prvGetNextExpireTime+0x18>
 80040aa:	2200      	movs	r2, #0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d105      	bne.n	80040c4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040b8:	4b07      	ldr	r3, [pc, #28]	; (80040d8 <prvGetNextExpireTime+0x44>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	60fb      	str	r3, [r7, #12]
 80040c2:	e001      	b.n	80040c8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80040c4:	2300      	movs	r3, #0
 80040c6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80040c8:	68fb      	ldr	r3, [r7, #12]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20000cac 	.word	0x20000cac

080040dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80040e4:	f7ff fa64 	bl	80035b0 <xTaskGetTickCount>
 80040e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80040ea:	4b0b      	ldr	r3, [pc, #44]	; (8004118 <prvSampleTimeNow+0x3c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d205      	bcs.n	8004100 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80040f4:	f000 f93c 	bl	8004370 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	601a      	str	r2, [r3, #0]
 80040fe:	e002      	b.n	8004106 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004106:	4a04      	ldr	r2, [pc, #16]	; (8004118 <prvSampleTimeNow+0x3c>)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800410c:	68fb      	ldr	r3, [r7, #12]
}
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bd80      	pop	{r7, pc}
 8004116:	bf00      	nop
 8004118:	20000cbc 	.word	0x20000cbc

0800411c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b086      	sub	sp, #24
 8004120:	af00      	add	r7, sp, #0
 8004122:	60f8      	str	r0, [r7, #12]
 8004124:	60b9      	str	r1, [r7, #8]
 8004126:	607a      	str	r2, [r7, #4]
 8004128:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800412a:	2300      	movs	r3, #0
 800412c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	68ba      	ldr	r2, [r7, #8]
 8004132:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	429a      	cmp	r2, r3
 8004140:	d812      	bhi.n	8004168 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad2      	subs	r2, r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	429a      	cmp	r2, r3
 800414e:	d302      	bcc.n	8004156 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004150:	2301      	movs	r3, #1
 8004152:	617b      	str	r3, [r7, #20]
 8004154:	e01b      	b.n	800418e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004156:	4b10      	ldr	r3, [pc, #64]	; (8004198 <prvInsertTimerInActiveList+0x7c>)
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	3304      	adds	r3, #4
 800415e:	4619      	mov	r1, r3
 8004160:	4610      	mov	r0, r2
 8004162:	f7fe f9c0 	bl	80024e6 <vListInsert>
 8004166:	e012      	b.n	800418e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004168:	687a      	ldr	r2, [r7, #4]
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d206      	bcs.n	800417e <prvInsertTimerInActiveList+0x62>
 8004170:	68ba      	ldr	r2, [r7, #8]
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	429a      	cmp	r2, r3
 8004176:	d302      	bcc.n	800417e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004178:	2301      	movs	r3, #1
 800417a:	617b      	str	r3, [r7, #20]
 800417c:	e007      	b.n	800418e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <prvInsertTimerInActiveList+0x80>)
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3304      	adds	r3, #4
 8004186:	4619      	mov	r1, r3
 8004188:	4610      	mov	r0, r2
 800418a:	f7fe f9ac 	bl	80024e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800418e:	697b      	ldr	r3, [r7, #20]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3718      	adds	r7, #24
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20000cb0 	.word	0x20000cb0
 800419c:	20000cac 	.word	0x20000cac

080041a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08e      	sub	sp, #56	; 0x38
 80041a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041a6:	e0d0      	b.n	800434a <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	da1a      	bge.n	80041e4 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80041ae:	1d3b      	adds	r3, r7, #4
 80041b0:	3304      	adds	r3, #4
 80041b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80041b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d10c      	bne.n	80041d4 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	b672      	cpsid	i
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	b662      	cpsie	i
 80041ce:	61fb      	str	r3, [r7, #28]
}
 80041d0:	bf00      	nop
 80041d2:	e7fe      	b.n	80041d2 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80041d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041da:	6850      	ldr	r0, [r2, #4]
 80041dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041de:	6892      	ldr	r2, [r2, #8]
 80041e0:	4611      	mov	r1, r2
 80041e2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	f2c0 80ae 	blt.w	8004348 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d004      	beq.n	8004202 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041fa:	3304      	adds	r3, #4
 80041fc:	4618      	mov	r0, r3
 80041fe:	f7fe f9ab 	bl	8002558 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004202:	463b      	mov	r3, r7
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff ff69 	bl	80040dc <prvSampleTimeNow>
 800420a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2b09      	cmp	r3, #9
 8004210:	f200 809b 	bhi.w	800434a <prvProcessReceivedCommands+0x1aa>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <prvProcessReceivedCommands+0x7c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	08004245 	.word	0x08004245
 8004220:	08004245 	.word	0x08004245
 8004224:	08004245 	.word	0x08004245
 8004228:	080042bd 	.word	0x080042bd
 800422c:	080042d1 	.word	0x080042d1
 8004230:	0800431f 	.word	0x0800431f
 8004234:	08004245 	.word	0x08004245
 8004238:	08004245 	.word	0x08004245
 800423c:	080042bd 	.word	0x080042bd
 8004240:	080042d1 	.word	0x080042d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004246:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800424a:	f043 0301 	orr.w	r3, r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004256:	68ba      	ldr	r2, [r7, #8]
 8004258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	18d1      	adds	r1, r2, r3
 800425e:	68bb      	ldr	r3, [r7, #8]
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004264:	f7ff ff5a 	bl	800411c <prvInsertTimerInActiveList>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d06d      	beq.n	800434a <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800426e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004274:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004278:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800427c:	f003 0304 	and.w	r3, r3, #4
 8004280:	2b00      	cmp	r3, #0
 8004282:	d062      	beq.n	800434a <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004284:	68ba      	ldr	r2, [r7, #8]
 8004286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	441a      	add	r2, r3
 800428c:	2300      	movs	r3, #0
 800428e:	9300      	str	r3, [sp, #0]
 8004290:	2300      	movs	r3, #0
 8004292:	2100      	movs	r1, #0
 8004294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004296:	f7ff fdff 	bl	8003e98 <xTimerGenericCommand>
 800429a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800429c:	6a3b      	ldr	r3, [r7, #32]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d153      	bne.n	800434a <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	b672      	cpsid	i
 80042a8:	f383 8811 	msr	BASEPRI, r3
 80042ac:	f3bf 8f6f 	isb	sy
 80042b0:	f3bf 8f4f 	dsb	sy
 80042b4:	b662      	cpsie	i
 80042b6:	61bb      	str	r3, [r7, #24]
}
 80042b8:	bf00      	nop
 80042ba:	e7fe      	b.n	80042ba <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042c2:	f023 0301 	bic.w	r3, r3, #1
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80042ce:	e03c      	b.n	800434a <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	b2da      	uxtb	r2, r3
 80042dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042e2:	68ba      	ldr	r2, [r7, #8]
 80042e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10c      	bne.n	800430a <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80042f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f4:	b672      	cpsid	i
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	b662      	cpsie	i
 8004304:	617b      	str	r3, [r7, #20]
}
 8004306:	bf00      	nop
 8004308:	e7fe      	b.n	8004308 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800430a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430c:	699a      	ldr	r2, [r3, #24]
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	18d1      	adds	r1, r2, r3
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004316:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004318:	f7ff ff00 	bl	800411c <prvInsertTimerInActiveList>
					break;
 800431c:	e015      	b.n	800434a <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800431e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004320:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 800432c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800432e:	f000 fbcb 	bl	8004ac8 <vPortFree>
 8004332:	e00a      	b.n	800434a <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	b2da      	uxtb	r2, r3
 8004340:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004342:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004346:	e000      	b.n	800434a <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004348:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800434a:	4b08      	ldr	r3, [pc, #32]	; (800436c <prvProcessReceivedCommands+0x1cc>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	1d39      	adds	r1, r7, #4
 8004350:	2200      	movs	r2, #0
 8004352:	4618      	mov	r0, r3
 8004354:	f7fe fbe0 	bl	8002b18 <xQueueReceive>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	f47f af24 	bne.w	80041a8 <prvProcessReceivedCommands+0x8>
	}
}
 8004360:	bf00      	nop
 8004362:	bf00      	nop
 8004364:	3730      	adds	r7, #48	; 0x30
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000cb4 	.word	0x20000cb4

08004370 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004376:	e04a      	b.n	800440e <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004378:	4b2e      	ldr	r3, [pc, #184]	; (8004434 <prvSwitchTimerLists+0xc4>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68db      	ldr	r3, [r3, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004382:	4b2c      	ldr	r3, [pc, #176]	; (8004434 <prvSwitchTimerLists+0xc4>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	3304      	adds	r3, #4
 8004390:	4618      	mov	r0, r3
 8004392:	f7fe f8e1 	bl	8002558 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	68f8      	ldr	r0, [r7, #12]
 800439c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043a4:	f003 0304 	and.w	r3, r3, #4
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d030      	beq.n	800440e <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4413      	add	r3, r2
 80043b4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80043b6:	68ba      	ldr	r2, [r7, #8]
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d90e      	bls.n	80043dc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	68ba      	ldr	r2, [r7, #8]
 80043c2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	68fa      	ldr	r2, [r7, #12]
 80043c8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043ca:	4b1a      	ldr	r3, [pc, #104]	; (8004434 <prvSwitchTimerLists+0xc4>)
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	3304      	adds	r3, #4
 80043d2:	4619      	mov	r1, r3
 80043d4:	4610      	mov	r0, r2
 80043d6:	f7fe f886 	bl	80024e6 <vListInsert>
 80043da:	e018      	b.n	800440e <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80043dc:	2300      	movs	r3, #0
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	2300      	movs	r3, #0
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	2100      	movs	r1, #0
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f7ff fd56 	bl	8003e98 <xTimerGenericCommand>
 80043ec:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10c      	bne.n	800440e <prvSwitchTimerLists+0x9e>
	__asm volatile
 80043f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043f8:	b672      	cpsid	i
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	b662      	cpsie	i
 8004408:	603b      	str	r3, [r7, #0]
}
 800440a:	bf00      	nop
 800440c:	e7fe      	b.n	800440c <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800440e:	4b09      	ldr	r3, [pc, #36]	; (8004434 <prvSwitchTimerLists+0xc4>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1af      	bne.n	8004378 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004418:	4b06      	ldr	r3, [pc, #24]	; (8004434 <prvSwitchTimerLists+0xc4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800441e:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvSwitchTimerLists+0xc8>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a04      	ldr	r2, [pc, #16]	; (8004434 <prvSwitchTimerLists+0xc4>)
 8004424:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004426:	4a04      	ldr	r2, [pc, #16]	; (8004438 <prvSwitchTimerLists+0xc8>)
 8004428:	697b      	ldr	r3, [r7, #20]
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	3718      	adds	r7, #24
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}
 8004434:	20000cac 	.word	0x20000cac
 8004438:	20000cb0 	.word	0x20000cb0

0800443c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004442:	f000 f94b 	bl	80046dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004446:	4b15      	ldr	r3, [pc, #84]	; (800449c <prvCheckForValidListAndQueue+0x60>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d120      	bne.n	8004490 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800444e:	4814      	ldr	r0, [pc, #80]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 8004450:	f7fd fff8 	bl	8002444 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004454:	4813      	ldr	r0, [pc, #76]	; (80044a4 <prvCheckForValidListAndQueue+0x68>)
 8004456:	f7fd fff5 	bl	8002444 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <prvCheckForValidListAndQueue+0x6c>)
 800445c:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <prvCheckForValidListAndQueue+0x64>)
 800445e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004460:	4b12      	ldr	r3, [pc, #72]	; (80044ac <prvCheckForValidListAndQueue+0x70>)
 8004462:	4a10      	ldr	r2, [pc, #64]	; (80044a4 <prvCheckForValidListAndQueue+0x68>)
 8004464:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004466:	2300      	movs	r3, #0
 8004468:	9300      	str	r3, [sp, #0]
 800446a:	4b11      	ldr	r3, [pc, #68]	; (80044b0 <prvCheckForValidListAndQueue+0x74>)
 800446c:	4a11      	ldr	r2, [pc, #68]	; (80044b4 <prvCheckForValidListAndQueue+0x78>)
 800446e:	2110      	movs	r1, #16
 8004470:	200a      	movs	r0, #10
 8004472:	f7fe f905 	bl	8002680 <xQueueGenericCreateStatic>
 8004476:	4603      	mov	r3, r0
 8004478:	4a08      	ldr	r2, [pc, #32]	; (800449c <prvCheckForValidListAndQueue+0x60>)
 800447a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800447c:	4b07      	ldr	r3, [pc, #28]	; (800449c <prvCheckForValidListAndQueue+0x60>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004484:	4b05      	ldr	r3, [pc, #20]	; (800449c <prvCheckForValidListAndQueue+0x60>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	490b      	ldr	r1, [pc, #44]	; (80044b8 <prvCheckForValidListAndQueue+0x7c>)
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fd3a 	bl	8002f04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004490:	f000 f958 	bl	8004744 <vPortExitCritical>
}
 8004494:	bf00      	nop
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000cb4 	.word	0x20000cb4
 80044a0:	20000c84 	.word	0x20000c84
 80044a4:	20000c98 	.word	0x20000c98
 80044a8:	20000cac 	.word	0x20000cac
 80044ac:	20000cb0 	.word	0x20000cb0
 80044b0:	20000d60 	.word	0x20000d60
 80044b4:	20000cc0 	.word	0x20000cc0
 80044b8:	08004db0 	.word	0x08004db0

080044bc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80044bc:	b480      	push	{r7}
 80044be:	b085      	sub	sp, #20
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	3b04      	subs	r3, #4
 80044cc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80044d4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	3b04      	subs	r3, #4
 80044da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	f023 0201 	bic.w	r2, r3, #1
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3b04      	subs	r3, #4
 80044ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80044ec:	4a0c      	ldr	r2, [pc, #48]	; (8004520 <pxPortInitialiseStack+0x64>)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3b14      	subs	r3, #20
 80044f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3b04      	subs	r3, #4
 8004502:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f06f 0202 	mvn.w	r2, #2
 800450a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	3b20      	subs	r3, #32
 8004510:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004512:	68fb      	ldr	r3, [r7, #12]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr
 8004520:	08004525 	.word	0x08004525

08004524 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <prvTaskExitError+0x5c>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004536:	d00c      	beq.n	8004552 <prvTaskExitError+0x2e>
	__asm volatile
 8004538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800453c:	b672      	cpsid	i
 800453e:	f383 8811 	msr	BASEPRI, r3
 8004542:	f3bf 8f6f 	isb	sy
 8004546:	f3bf 8f4f 	dsb	sy
 800454a:	b662      	cpsie	i
 800454c:	60fb      	str	r3, [r7, #12]
}
 800454e:	bf00      	nop
 8004550:	e7fe      	b.n	8004550 <prvTaskExitError+0x2c>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004556:	b672      	cpsid	i
 8004558:	f383 8811 	msr	BASEPRI, r3
 800455c:	f3bf 8f6f 	isb	sy
 8004560:	f3bf 8f4f 	dsb	sy
 8004564:	b662      	cpsie	i
 8004566:	60bb      	str	r3, [r7, #8]
}
 8004568:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800456a:	bf00      	nop
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d0fc      	beq.n	800456c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004572:	bf00      	nop
 8004574:	bf00      	nop
 8004576:	3714      	adds	r7, #20
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr
 8004580:	2000000c 	.word	0x2000000c
	...

08004590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004590:	4b07      	ldr	r3, [pc, #28]	; (80045b0 <pxCurrentTCBConst2>)
 8004592:	6819      	ldr	r1, [r3, #0]
 8004594:	6808      	ldr	r0, [r1, #0]
 8004596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459a:	f380 8809 	msr	PSP, r0
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f04f 0000 	mov.w	r0, #0
 80045a6:	f380 8811 	msr	BASEPRI, r0
 80045aa:	4770      	bx	lr
 80045ac:	f3af 8000 	nop.w

080045b0 <pxCurrentTCBConst2>:
 80045b0:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80045b4:	bf00      	nop
 80045b6:	bf00      	nop

080045b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80045b8:	4808      	ldr	r0, [pc, #32]	; (80045dc <prvPortStartFirstTask+0x24>)
 80045ba:	6800      	ldr	r0, [r0, #0]
 80045bc:	6800      	ldr	r0, [r0, #0]
 80045be:	f380 8808 	msr	MSP, r0
 80045c2:	f04f 0000 	mov.w	r0, #0
 80045c6:	f380 8814 	msr	CONTROL, r0
 80045ca:	b662      	cpsie	i
 80045cc:	b661      	cpsie	f
 80045ce:	f3bf 8f4f 	dsb	sy
 80045d2:	f3bf 8f6f 	isb	sy
 80045d6:	df00      	svc	0
 80045d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80045da:	bf00      	nop
 80045dc:	e000ed08 	.word	0xe000ed08

080045e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045e6:	4b37      	ldr	r3, [pc, #220]	; (80046c4 <xPortStartScheduler+0xe4>)
 80045e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	22ff      	movs	r2, #255	; 0xff
 80045f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004608:	b2da      	uxtb	r2, r3
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <xPortStartScheduler+0xe8>)
 800460c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800460e:	4b2f      	ldr	r3, [pc, #188]	; (80046cc <xPortStartScheduler+0xec>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004614:	e009      	b.n	800462a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004616:	4b2d      	ldr	r3, [pc, #180]	; (80046cc <xPortStartScheduler+0xec>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	3b01      	subs	r3, #1
 800461c:	4a2b      	ldr	r2, [pc, #172]	; (80046cc <xPortStartScheduler+0xec>)
 800461e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004620:	78fb      	ldrb	r3, [r7, #3]
 8004622:	b2db      	uxtb	r3, r3
 8004624:	005b      	lsls	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	b2db      	uxtb	r3, r3
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b80      	cmp	r3, #128	; 0x80
 8004634:	d0ef      	beq.n	8004616 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004636:	4b25      	ldr	r3, [pc, #148]	; (80046cc <xPortStartScheduler+0xec>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f1c3 0307 	rsb	r3, r3, #7
 800463e:	2b04      	cmp	r3, #4
 8004640:	d00c      	beq.n	800465c <xPortStartScheduler+0x7c>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	b672      	cpsid	i
 8004648:	f383 8811 	msr	BASEPRI, r3
 800464c:	f3bf 8f6f 	isb	sy
 8004650:	f3bf 8f4f 	dsb	sy
 8004654:	b662      	cpsie	i
 8004656:	60bb      	str	r3, [r7, #8]
}
 8004658:	bf00      	nop
 800465a:	e7fe      	b.n	800465a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800465c:	4b1b      	ldr	r3, [pc, #108]	; (80046cc <xPortStartScheduler+0xec>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	021b      	lsls	r3, r3, #8
 8004662:	4a1a      	ldr	r2, [pc, #104]	; (80046cc <xPortStartScheduler+0xec>)
 8004664:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004666:	4b19      	ldr	r3, [pc, #100]	; (80046cc <xPortStartScheduler+0xec>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800466e:	4a17      	ldr	r2, [pc, #92]	; (80046cc <xPortStartScheduler+0xec>)
 8004670:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	b2da      	uxtb	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800467a:	4b15      	ldr	r3, [pc, #84]	; (80046d0 <xPortStartScheduler+0xf0>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a14      	ldr	r2, [pc, #80]	; (80046d0 <xPortStartScheduler+0xf0>)
 8004680:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004684:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004686:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <xPortStartScheduler+0xf0>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a11      	ldr	r2, [pc, #68]	; (80046d0 <xPortStartScheduler+0xf0>)
 800468c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004690:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004692:	f000 f8dd 	bl	8004850 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004696:	4b0f      	ldr	r3, [pc, #60]	; (80046d4 <xPortStartScheduler+0xf4>)
 8004698:	2200      	movs	r2, #0
 800469a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800469c:	f000 f8fc 	bl	8004898 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80046a0:	4b0d      	ldr	r3, [pc, #52]	; (80046d8 <xPortStartScheduler+0xf8>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a0c      	ldr	r2, [pc, #48]	; (80046d8 <xPortStartScheduler+0xf8>)
 80046a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80046aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80046ac:	f7ff ff84 	bl	80045b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80046b0:	f7ff f84a 	bl	8003748 <vTaskSwitchContext>
	prvTaskExitError();
 80046b4:	f7ff ff36 	bl	8004524 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3710      	adds	r7, #16
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	e000e400 	.word	0xe000e400
 80046c8:	20000db0 	.word	0x20000db0
 80046cc:	20000db4 	.word	0x20000db4
 80046d0:	e000ed20 	.word	0xe000ed20
 80046d4:	2000000c 	.word	0x2000000c
 80046d8:	e000ef34 	.word	0xe000ef34

080046dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
	__asm volatile
 80046e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046e6:	b672      	cpsid	i
 80046e8:	f383 8811 	msr	BASEPRI, r3
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	f3bf 8f4f 	dsb	sy
 80046f4:	b662      	cpsie	i
 80046f6:	607b      	str	r3, [r7, #4]
}
 80046f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046fa:	4b10      	ldr	r3, [pc, #64]	; (800473c <vPortEnterCritical+0x60>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3301      	adds	r3, #1
 8004700:	4a0e      	ldr	r2, [pc, #56]	; (800473c <vPortEnterCritical+0x60>)
 8004702:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004704:	4b0d      	ldr	r3, [pc, #52]	; (800473c <vPortEnterCritical+0x60>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d111      	bne.n	8004730 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800470c:	4b0c      	ldr	r3, [pc, #48]	; (8004740 <vPortEnterCritical+0x64>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00c      	beq.n	8004730 <vPortEnterCritical+0x54>
	__asm volatile
 8004716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471a:	b672      	cpsid	i
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	b662      	cpsie	i
 800472a:	603b      	str	r3, [r7, #0]
}
 800472c:	bf00      	nop
 800472e:	e7fe      	b.n	800472e <vPortEnterCritical+0x52>
	}
}
 8004730:	bf00      	nop
 8004732:	370c      	adds	r7, #12
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr
 800473c:	2000000c 	.word	0x2000000c
 8004740:	e000ed04 	.word	0xe000ed04

08004744 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800474a:	4b13      	ldr	r3, [pc, #76]	; (8004798 <vPortExitCritical+0x54>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10c      	bne.n	800476c <vPortExitCritical+0x28>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	b672      	cpsid	i
 8004758:	f383 8811 	msr	BASEPRI, r3
 800475c:	f3bf 8f6f 	isb	sy
 8004760:	f3bf 8f4f 	dsb	sy
 8004764:	b662      	cpsie	i
 8004766:	607b      	str	r3, [r7, #4]
}
 8004768:	bf00      	nop
 800476a:	e7fe      	b.n	800476a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800476c:	4b0a      	ldr	r3, [pc, #40]	; (8004798 <vPortExitCritical+0x54>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3b01      	subs	r3, #1
 8004772:	4a09      	ldr	r2, [pc, #36]	; (8004798 <vPortExitCritical+0x54>)
 8004774:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004776:	4b08      	ldr	r3, [pc, #32]	; (8004798 <vPortExitCritical+0x54>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d105      	bne.n	800478a <vPortExitCritical+0x46>
 800477e:	2300      	movs	r3, #0
 8004780:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	f383 8811 	msr	BASEPRI, r3
}
 8004788:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
 8004796:	bf00      	nop
 8004798:	2000000c 	.word	0x2000000c
 800479c:	00000000 	.word	0x00000000

080047a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80047a0:	f3ef 8009 	mrs	r0, PSP
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	4b15      	ldr	r3, [pc, #84]	; (8004800 <pxCurrentTCBConst>)
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	f01e 0f10 	tst.w	lr, #16
 80047b0:	bf08      	it	eq
 80047b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ba:	6010      	str	r0, [r2, #0]
 80047bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80047c4:	b672      	cpsid	i
 80047c6:	f380 8811 	msr	BASEPRI, r0
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
 80047d2:	b662      	cpsie	i
 80047d4:	f7fe ffb8 	bl	8003748 <vTaskSwitchContext>
 80047d8:	f04f 0000 	mov.w	r0, #0
 80047dc:	f380 8811 	msr	BASEPRI, r0
 80047e0:	bc09      	pop	{r0, r3}
 80047e2:	6819      	ldr	r1, [r3, #0]
 80047e4:	6808      	ldr	r0, [r1, #0]
 80047e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ea:	f01e 0f10 	tst.w	lr, #16
 80047ee:	bf08      	it	eq
 80047f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80047f4:	f380 8809 	msr	PSP, r0
 80047f8:	f3bf 8f6f 	isb	sy
 80047fc:	4770      	bx	lr
 80047fe:	bf00      	nop

08004800 <pxCurrentTCBConst>:
 8004800:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004804:	bf00      	nop
 8004806:	bf00      	nop

08004808 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b082      	sub	sp, #8
 800480c:	af00      	add	r7, sp, #0
	__asm volatile
 800480e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004812:	b672      	cpsid	i
 8004814:	f383 8811 	msr	BASEPRI, r3
 8004818:	f3bf 8f6f 	isb	sy
 800481c:	f3bf 8f4f 	dsb	sy
 8004820:	b662      	cpsie	i
 8004822:	607b      	str	r3, [r7, #4]
}
 8004824:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004826:	f7fe fed3 	bl	80035d0 <xTaskIncrementTick>
 800482a:	4603      	mov	r3, r0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d003      	beq.n	8004838 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004830:	4b06      	ldr	r3, [pc, #24]	; (800484c <SysTick_Handler+0x44>)
 8004832:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004836:	601a      	str	r2, [r3, #0]
 8004838:	2300      	movs	r3, #0
 800483a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	f383 8811 	msr	BASEPRI, r3
}
 8004842:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004844:	bf00      	nop
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}
 800484c:	e000ed04 	.word	0xe000ed04

08004850 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004854:	4b0b      	ldr	r3, [pc, #44]	; (8004884 <vPortSetupTimerInterrupt+0x34>)
 8004856:	2200      	movs	r2, #0
 8004858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800485a:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <vPortSetupTimerInterrupt+0x38>)
 800485c:	2200      	movs	r2, #0
 800485e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004860:	4b0a      	ldr	r3, [pc, #40]	; (800488c <vPortSetupTimerInterrupt+0x3c>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a0a      	ldr	r2, [pc, #40]	; (8004890 <vPortSetupTimerInterrupt+0x40>)
 8004866:	fba2 2303 	umull	r2, r3, r2, r3
 800486a:	099b      	lsrs	r3, r3, #6
 800486c:	4a09      	ldr	r2, [pc, #36]	; (8004894 <vPortSetupTimerInterrupt+0x44>)
 800486e:	3b01      	subs	r3, #1
 8004870:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004872:	4b04      	ldr	r3, [pc, #16]	; (8004884 <vPortSetupTimerInterrupt+0x34>)
 8004874:	2207      	movs	r2, #7
 8004876:	601a      	str	r2, [r3, #0]
}
 8004878:	bf00      	nop
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	e000e010 	.word	0xe000e010
 8004888:	e000e018 	.word	0xe000e018
 800488c:	20000000 	.word	0x20000000
 8004890:	10624dd3 	.word	0x10624dd3
 8004894:	e000e014 	.word	0xe000e014

08004898 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004898:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80048a8 <vPortEnableVFP+0x10>
 800489c:	6801      	ldr	r1, [r0, #0]
 800489e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80048a2:	6001      	str	r1, [r0, #0]
 80048a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80048a6:	bf00      	nop
 80048a8:	e000ed88 	.word	0xe000ed88

080048ac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80048b2:	f3ef 8305 	mrs	r3, IPSR
 80048b6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b0f      	cmp	r3, #15
 80048bc:	d916      	bls.n	80048ec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048be:	4a19      	ldr	r2, [pc, #100]	; (8004924 <vPortValidateInterruptPriority+0x78>)
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	4413      	add	r3, r2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048c8:	4b17      	ldr	r3, [pc, #92]	; (8004928 <vPortValidateInterruptPriority+0x7c>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	7afa      	ldrb	r2, [r7, #11]
 80048ce:	429a      	cmp	r2, r3
 80048d0:	d20c      	bcs.n	80048ec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80048d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d6:	b672      	cpsid	i
 80048d8:	f383 8811 	msr	BASEPRI, r3
 80048dc:	f3bf 8f6f 	isb	sy
 80048e0:	f3bf 8f4f 	dsb	sy
 80048e4:	b662      	cpsie	i
 80048e6:	607b      	str	r3, [r7, #4]
}
 80048e8:	bf00      	nop
 80048ea:	e7fe      	b.n	80048ea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80048ec:	4b0f      	ldr	r3, [pc, #60]	; (800492c <vPortValidateInterruptPriority+0x80>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <vPortValidateInterruptPriority+0x84>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	429a      	cmp	r2, r3
 80048fa:	d90c      	bls.n	8004916 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80048fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004900:	b672      	cpsid	i
 8004902:	f383 8811 	msr	BASEPRI, r3
 8004906:	f3bf 8f6f 	isb	sy
 800490a:	f3bf 8f4f 	dsb	sy
 800490e:	b662      	cpsie	i
 8004910:	603b      	str	r3, [r7, #0]
}
 8004912:	bf00      	nop
 8004914:	e7fe      	b.n	8004914 <vPortValidateInterruptPriority+0x68>
	}
 8004916:	bf00      	nop
 8004918:	3714      	adds	r7, #20
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr
 8004922:	bf00      	nop
 8004924:	e000e3f0 	.word	0xe000e3f0
 8004928:	20000db0 	.word	0x20000db0
 800492c:	e000ed0c 	.word	0xe000ed0c
 8004930:	20000db4 	.word	0x20000db4

08004934 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b08a      	sub	sp, #40	; 0x28
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800493c:	2300      	movs	r3, #0
 800493e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004940:	f7fe fd88 	bl	8003454 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004944:	4b5b      	ldr	r3, [pc, #364]	; (8004ab4 <pvPortMalloc+0x180>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800494c:	f000 f91a 	bl	8004b84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004950:	4b59      	ldr	r3, [pc, #356]	; (8004ab8 <pvPortMalloc+0x184>)
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	f040 8092 	bne.w	8004a82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01f      	beq.n	80049a4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8004964:	2208      	movs	r2, #8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	4413      	add	r3, r2
 800496a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	2b00      	cmp	r3, #0
 8004974:	d016      	beq.n	80049a4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f023 0307 	bic.w	r3, r3, #7
 800497c:	3308      	adds	r3, #8
 800497e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0307 	and.w	r3, r3, #7
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00c      	beq.n	80049a4 <pvPortMalloc+0x70>
	__asm volatile
 800498a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498e:	b672      	cpsid	i
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	b662      	cpsie	i
 800499e:	617b      	str	r3, [r7, #20]
}
 80049a0:	bf00      	nop
 80049a2:	e7fe      	b.n	80049a2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d06b      	beq.n	8004a82 <pvPortMalloc+0x14e>
 80049aa:	4b44      	ldr	r3, [pc, #272]	; (8004abc <pvPortMalloc+0x188>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d866      	bhi.n	8004a82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049b4:	4b42      	ldr	r3, [pc, #264]	; (8004ac0 <pvPortMalloc+0x18c>)
 80049b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049b8:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <pvPortMalloc+0x18c>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049be:	e004      	b.n	80049ca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80049c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d903      	bls.n	80049dc <pvPortMalloc+0xa8>
 80049d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f1      	bne.n	80049c0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80049dc:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <pvPortMalloc+0x180>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049e2:	429a      	cmp	r2, r3
 80049e4:	d04d      	beq.n	8004a82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	2208      	movs	r2, #8
 80049ec:	4413      	add	r3, r2
 80049ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	6a3b      	ldr	r3, [r7, #32]
 80049f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049fa:	685a      	ldr	r2, [r3, #4]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	1ad2      	subs	r2, r2, r3
 8004a00:	2308      	movs	r3, #8
 8004a02:	005b      	lsls	r3, r3, #1
 8004a04:	429a      	cmp	r2, r3
 8004a06:	d921      	bls.n	8004a4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	f003 0307 	and.w	r3, r3, #7
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00c      	beq.n	8004a34 <pvPortMalloc+0x100>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a1e:	b672      	cpsid	i
 8004a20:	f383 8811 	msr	BASEPRI, r3
 8004a24:	f3bf 8f6f 	isb	sy
 8004a28:	f3bf 8f4f 	dsb	sy
 8004a2c:	b662      	cpsie	i
 8004a2e:	613b      	str	r3, [r7, #16]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	1ad2      	subs	r2, r2, r3
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a46:	69b8      	ldr	r0, [r7, #24]
 8004a48:	f000 f8fe 	bl	8004c48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a4c:	4b1b      	ldr	r3, [pc, #108]	; (8004abc <pvPortMalloc+0x188>)
 8004a4e:	681a      	ldr	r2, [r3, #0]
 8004a50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	4a19      	ldr	r2, [pc, #100]	; (8004abc <pvPortMalloc+0x188>)
 8004a58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a5a:	4b18      	ldr	r3, [pc, #96]	; (8004abc <pvPortMalloc+0x188>)
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	4b19      	ldr	r3, [pc, #100]	; (8004ac4 <pvPortMalloc+0x190>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d203      	bcs.n	8004a6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a66:	4b15      	ldr	r3, [pc, #84]	; (8004abc <pvPortMalloc+0x188>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a16      	ldr	r2, [pc, #88]	; (8004ac4 <pvPortMalloc+0x190>)
 8004a6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a70:	685a      	ldr	r2, [r3, #4]
 8004a72:	4b11      	ldr	r3, [pc, #68]	; (8004ab8 <pvPortMalloc+0x184>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	2200      	movs	r2, #0
 8004a80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004a82:	f7fe fcf5 	bl	8003470 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00c      	beq.n	8004aaa <pvPortMalloc+0x176>
	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	b672      	cpsid	i
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	b662      	cpsie	i
 8004aa4:	60fb      	str	r3, [r7, #12]
}
 8004aa6:	bf00      	nop
 8004aa8:	e7fe      	b.n	8004aa8 <pvPortMalloc+0x174>
	return pvReturn;
 8004aaa:	69fb      	ldr	r3, [r7, #28]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3728      	adds	r7, #40	; 0x28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	200049c0 	.word	0x200049c0
 8004ab8:	200049cc 	.word	0x200049cc
 8004abc:	200049c4 	.word	0x200049c4
 8004ac0:	200049b8 	.word	0x200049b8
 8004ac4:	200049c8 	.word	0x200049c8

08004ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04c      	beq.n	8004b74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ada:	2308      	movs	r3, #8
 8004adc:	425b      	negs	r3, r3
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685a      	ldr	r2, [r3, #4]
 8004aec:	4b23      	ldr	r3, [pc, #140]	; (8004b7c <vPortFree+0xb4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <vPortFree+0x48>
	__asm volatile
 8004af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afa:	b672      	cpsid	i
 8004afc:	f383 8811 	msr	BASEPRI, r3
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	b662      	cpsie	i
 8004b0a:	60fb      	str	r3, [r7, #12]
}
 8004b0c:	bf00      	nop
 8004b0e:	e7fe      	b.n	8004b0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00c      	beq.n	8004b32 <vPortFree+0x6a>
	__asm volatile
 8004b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1c:	b672      	cpsid	i
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	b662      	cpsie	i
 8004b2c:	60bb      	str	r3, [r7, #8]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	685a      	ldr	r2, [r3, #4]
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <vPortFree+0xb4>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d019      	beq.n	8004b74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d115      	bne.n	8004b74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	685a      	ldr	r2, [r3, #4]
 8004b4c:	4b0b      	ldr	r3, [pc, #44]	; (8004b7c <vPortFree+0xb4>)
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	43db      	mvns	r3, r3
 8004b52:	401a      	ands	r2, r3
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b58:	f7fe fc7c 	bl	8003454 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4b07      	ldr	r3, [pc, #28]	; (8004b80 <vPortFree+0xb8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4413      	add	r3, r2
 8004b66:	4a06      	ldr	r2, [pc, #24]	; (8004b80 <vPortFree+0xb8>)
 8004b68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b6a:	6938      	ldr	r0, [r7, #16]
 8004b6c:	f000 f86c 	bl	8004c48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b70:	f7fe fc7e 	bl	8003470 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	200049cc 	.word	0x200049cc
 8004b80:	200049c4 	.word	0x200049c4

08004b84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004b8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004b90:	4b27      	ldr	r3, [pc, #156]	; (8004c30 <prvHeapInit+0xac>)
 8004b92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3307      	adds	r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <prvHeapInit+0xac>)
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bbc:	4a1d      	ldr	r2, [pc, #116]	; (8004c34 <prvHeapInit+0xb0>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bc2:	4b1c      	ldr	r3, [pc, #112]	; (8004c34 <prvHeapInit+0xb0>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <prvHeapInit+0xb4>)
 8004be4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004be6:	4b14      	ldr	r3, [pc, #80]	; (8004c38 <prvHeapInit+0xb4>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <prvHeapInit+0xb4>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c04:	4b0c      	ldr	r3, [pc, #48]	; (8004c38 <prvHeapInit+0xb4>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a0a      	ldr	r2, [pc, #40]	; (8004c3c <prvHeapInit+0xb8>)
 8004c12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a09      	ldr	r2, [pc, #36]	; (8004c40 <prvHeapInit+0xbc>)
 8004c1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c1c:	4b09      	ldr	r3, [pc, #36]	; (8004c44 <prvHeapInit+0xc0>)
 8004c1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c22:	601a      	str	r2, [r3, #0]
}
 8004c24:	bf00      	nop
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	20000db8 	.word	0x20000db8
 8004c34:	200049b8 	.word	0x200049b8
 8004c38:	200049c0 	.word	0x200049c0
 8004c3c:	200049c8 	.word	0x200049c8
 8004c40:	200049c4 	.word	0x200049c4
 8004c44:	200049cc 	.word	0x200049cc

08004c48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b085      	sub	sp, #20
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c50:	4b28      	ldr	r3, [pc, #160]	; (8004cf4 <prvInsertBlockIntoFreeList+0xac>)
 8004c52:	60fb      	str	r3, [r7, #12]
 8004c54:	e002      	b.n	8004c5c <prvInsertBlockIntoFreeList+0x14>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d8f7      	bhi.n	8004c56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	68ba      	ldr	r2, [r7, #8]
 8004c70:	4413      	add	r3, r2
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d108      	bne.n	8004c8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	441a      	add	r2, r3
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	441a      	add	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d118      	bne.n	8004cd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	4b15      	ldr	r3, [pc, #84]	; (8004cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d00d      	beq.n	8004cc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	441a      	add	r2, r3
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e008      	b.n	8004cd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cc6:	4b0c      	ldr	r3, [pc, #48]	; (8004cf8 <prvInsertBlockIntoFreeList+0xb0>)
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	e003      	b.n	8004cd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	429a      	cmp	r2, r3
 8004cde:	d002      	beq.n	8004ce6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ce6:	bf00      	nop
 8004ce8:	3714      	adds	r7, #20
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	200049b8 	.word	0x200049b8
 8004cf8:	200049c0 	.word	0x200049c0

08004cfc <__libc_init_array>:
 8004cfc:	b570      	push	{r4, r5, r6, lr}
 8004cfe:	4d0d      	ldr	r5, [pc, #52]	; (8004d34 <__libc_init_array+0x38>)
 8004d00:	4c0d      	ldr	r4, [pc, #52]	; (8004d38 <__libc_init_array+0x3c>)
 8004d02:	1b64      	subs	r4, r4, r5
 8004d04:	10a4      	asrs	r4, r4, #2
 8004d06:	2600      	movs	r6, #0
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	d109      	bne.n	8004d20 <__libc_init_array+0x24>
 8004d0c:	4d0b      	ldr	r5, [pc, #44]	; (8004d3c <__libc_init_array+0x40>)
 8004d0e:	4c0c      	ldr	r4, [pc, #48]	; (8004d40 <__libc_init_array+0x44>)
 8004d10:	f000 f82e 	bl	8004d70 <_init>
 8004d14:	1b64      	subs	r4, r4, r5
 8004d16:	10a4      	asrs	r4, r4, #2
 8004d18:	2600      	movs	r6, #0
 8004d1a:	42a6      	cmp	r6, r4
 8004d1c:	d105      	bne.n	8004d2a <__libc_init_array+0x2e>
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d24:	4798      	blx	r3
 8004d26:	3601      	adds	r6, #1
 8004d28:	e7ee      	b.n	8004d08 <__libc_init_array+0xc>
 8004d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d2e:	4798      	blx	r3
 8004d30:	3601      	adds	r6, #1
 8004d32:	e7f2      	b.n	8004d1a <__libc_init_array+0x1e>
 8004d34:	08004e44 	.word	0x08004e44
 8004d38:	08004e44 	.word	0x08004e44
 8004d3c:	08004e44 	.word	0x08004e44
 8004d40:	08004e48 	.word	0x08004e48

08004d44 <memcpy>:
 8004d44:	440a      	add	r2, r1
 8004d46:	4291      	cmp	r1, r2
 8004d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d4c:	d100      	bne.n	8004d50 <memcpy+0xc>
 8004d4e:	4770      	bx	lr
 8004d50:	b510      	push	{r4, lr}
 8004d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d5a:	4291      	cmp	r1, r2
 8004d5c:	d1f9      	bne.n	8004d52 <memcpy+0xe>
 8004d5e:	bd10      	pop	{r4, pc}

08004d60 <memset>:
 8004d60:	4402      	add	r2, r0
 8004d62:	4603      	mov	r3, r0
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d100      	bne.n	8004d6a <memset+0xa>
 8004d68:	4770      	bx	lr
 8004d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d6e:	e7f9      	b.n	8004d64 <memset+0x4>

08004d70 <_init>:
 8004d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d72:	bf00      	nop
 8004d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d76:	bc08      	pop	{r3}
 8004d78:	469e      	mov	lr, r3
 8004d7a:	4770      	bx	lr

08004d7c <_fini>:
 8004d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d7e:	bf00      	nop
 8004d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d82:	bc08      	pop	{r3}
 8004d84:	469e      	mov	lr, r3
 8004d86:	4770      	bx	lr
